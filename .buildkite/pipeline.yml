agents:
  queue: "cardano-wallet"

env:
  LC_ALL: "C.UTF-8"
  NIX_PATH: "channel:nixos-21.11"

  # Per-host variables - shared across containers on host
  macos: "x86_64-darwin"
  linux: "x86_64-linux"


steps:
  - label: 'Merge from staging only'
    if: 'build.branch == "staging"'
    command: './.buildkite/check-bors.sh'
    agents:
      system: ${linux}

  - wait: ~
    if: 'build.branch == "staging"'

  - label: 'Check nix (linux)'
    # Check whether regenerate.sh was applied when it had to be applied.
    key: linux-nix
    commands:
      - './nix/regenerate.sh'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Build bench and run unit tests (linux)'
    depends_on: linux-nix
    command:
      - 'nix build .#ci.tests.all'
      - 'nix build .#ci.benchmarks.all'
      - 'nix build -L .#ci.${linux}.tests.run.unit'

    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Check Cabal Configure'
    depends_on: linux-nix
    command: 'nix develop --command scripts/buildkite/check-haskell-nix-cabal.sh'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Check Stylish Haskell'
    depends_on: linux-nix
    command: 'nix develop --command .buildkite/check-stylish.sh'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Check HLint'
    depends_on: linux-nix
    command: 'nix develop --command bash -c "echo +++ HLint ; hlint lib"'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Validate OpenAPI Specification'
    depends_on: linux-nix
    command: 'nix develop --command bash -c "echo +++ openapi-spec-validator ; openapi-spec-validator --schema 3.0.0 specifications/api/swagger.yaml"'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Print TODO list'
    depends_on: linux-nix
    command: 'nix develop --command scripts/todo-list.sh'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Lint bash shell scripts'
    depends_on: linux-nix
    commands:
      - 'echo +++ Shellcheck'
      - './scripts/shellcheck.sh'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Check HLS works'
    depends_on: linux-nix
    command: |
        ln -sf hie-direnv.yaml hie.yaml
        nix develop --command bash -c "haskell-language-server lib/wallet/src/Cardano/Wallet.hs"
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - block: 'Run integration tests (linux)'
    if: '(build.branch != "staging") && (build.branch != "trying") && (build.branch != "master")'
    key: trigger-linux
    depends_on:
      - linux-nix

  - label: 'Run integration tests (linux)'
    command: 'nix build -L .#ci.${linux}.tests.run.integration'
    depends_on: trigger-linux
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - block: 'Run benchmark (api)'
    depends_on: linux-nix
    key: trigger-benchmark-api

  - label: 'Run benchmark (api)'
    command: "./.buildkite/bench-api.sh"
    depends_on: trigger-benchmark-api
    timeout_in_minutes: 20
    agents:
      system: x86_64-linux
    # We do not use the  benchmark  queue here, as we don't want
    # to use system resources that are intended for long-running processes
    # to perform quick-and-dirty benchmark runs.
    # queue: benchmark
    if: 'build.env("step") == null || build.env("step") =~ /bench-api/'
    env:
      TMPDIR: "/cache"

  - block: "macOS steps"
    depends_on: linux-nix
    key: trigger-macos
    if: 'build.branch != "master"'

  - label: 'Check nix (macOS)'
    depends_on: trigger-macos
    key: macos-nix
    commands:
      - './nix/regenerate.sh'
    agents:
      system: ${macos}
    if: 0 == 1 # Disabled for now until a macos mini is available

  - label: 'Run unit tests (macOS)'
    depends_on: macos-nix
    key: macos-build-tests
    command: 'GC_DONT_GC=1 nix build --max-silent-time 0 --max-jobs 1 -L .#ci.${macos}.tests.run.unit'
    agents:
      system: ${macos}
    if: 0 == 1 # Disabled for now until a macos mini is available

  - label: 'Build package (macOS)'
    depends_on: macos-nix
    key: build-macos
    command: nix build --max-silent-time 0 --max-jobs 1 -o result/macos-intel .#ci.artifacts.macos-intel.release
    artifact_paths: [ "./result/macos-intel/**" ]
    agents:
      system: ${macos}
    if: 0 == 1 # Disabled for now until a macos mini is available

  - block: "Build package and docker image (linux)"
    depends_on: linux-nix
    if: '(build.branch != "staging") && (build.branch != "trying") && (build.branch != "master")'
    key: trigger-build-linux-package

  - label: 'Build package (linux)'
    depends_on: [linux-nix, trigger-build-linux-package]
    key: build-linux
    command: nix build -o result/linux .#ci.artifacts.linux64.release
    artifact_paths: [ "./result/linux/**" ]
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Build Docker Image (linux)'
    depends_on: [linux-nix, trigger-build-linux-package]
    key: build-docker
    command:
      - "mkdir -p config && echo '{  outputs = _: { dockerHubRepoName = \"inputoutput/cardano-wallet\"; }; }'  > config/flake.nix"
      - "nix build .#pushDockerImage --override-input hostNixpkgs \"path:$(nix eval --impure -I $NIX_PATH --expr '(import <nixpkgs> {}).path')\" --override-input customConfig path:./config -o docker-build-push"
      - "./docker-build-push"
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"
    soft_fail:
      - exit_status: '*'

  - block: "Build windows artifacts"
    depends_on: linux-nix
    if: '(build.branch != "staging") && (build.branch != "trying") && (build.branch != "master")'
    key: trigger-build-windows-artifacts

  - label: 'Build package (windows)'
    depends_on: [linux-nix, trigger-build-windows-artifacts]
    key: build-windows
    command: nix build -o result/windows .#ci.artifacts.win64.release
    artifact_paths: [ "./result/windows/**" ]
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Build testing bundle (windows)'
    depends_on: [linux-nix, trigger-build-windows-artifacts]
    key: build-windows-tests
    command: nix build -o result/windows-tests .#ci.artifacts.win64.tests
    artifact_paths: [ "./result/windows-tests/**" ]
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"
