agents:
  queue: "cardano-wallet"

env:
  LC_ALL: "C.UTF-8"
  NIX_PATH: "channel:nixos-21.11"

  # Per-host variables - shared across containers on host
  macos: "aarch64-darwin"
  linux: "x86_64-linux"


steps:
  - label: 'Merge from staging only'
    if: 'build.branch == "staging"'
    command: './.buildkite/check-bors.sh'
    agents:
      system: ${linux}

  - wait: ~
    if: 'build.branch == "staging"'

  - label: 'Check nix (linux)'
    # Check whether regenerate.sh was applied when it had to be applied.
    key: linux-nix
    commands:
      - './nix/regenerate.sh'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - block: "Run cabal release"
    if: '(build.branch !~ /^gh-readonly-queue\/master/) && (build.branch != "master") && (build.branch !~ /^release-candidate/)'
    depends_on: linux-nix
    key: cabal-release-block

  - label: 'Cabal build all -frelease'
    key: cabal-release
    depends_on: cabal-release-block
    command: |
      nix develop -c cabal update
      nix develop -c cabal build all -frelease
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Run unit tests (linux)'
    key: linux-tests-unit
    depends_on: linux-nix
    command: 'nix build -L .#ci.${linux}.tests.run.unit'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: Run local-cluster tests
    key: local-cluster-tests
    depends_on: linux-nix
    command: |
      mkdir local-cluster-logs
      nix shell "nixpkgs#just" -c just test-local-cluster
    agents:
      system: ${linux}
    artifact_paths: [ "./local-cluster-logs/**" ]
    env:
      TMPDIR: "/cache"
      CLUSTER_LOGS_DIR_PATH: local-cluster-logs

  - label: "Babbage integration tests (linux)"
    key: linux-tests-integration-babbage
    depends_on: linux-nix
    command: |
        mkdir integration-test-dir
        export CLUSTER_LOGS_DIR_PATH=integration-test-dir/cluster.logs
        export INTEGRATION_TEST_DIR=integration-test-dir
        nix shell 'nixpkgs#just' -c just babbage-integration-tests
    artifact_paths: [ "./integration-test-dir/**" ]
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: "Conway integration tests (linux)"
    key: linux-tests-integration-conway
    depends_on: linux-nix
    command: |
        mkdir integration-test-dir
        export CLUSTER_LOGS_DIR_PATH=integration-test-dir/cluster.logs
        export INTEGRATION_TEST_DIR=integration-test-dir
        nix shell 'nixpkgs#just' -c just conway-integration-tests
    artifact_paths: [ "./integration-test-dir/**" ]
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Build benchmarks (linux)'
    key: build-benchmarks
    depends_on: linux-nix
    command: 'nix build .#ci.benchmarks.all'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Check Cabal Configure'
    key: cabal-configure
    depends_on: linux-nix
    command: 'nix develop --command scripts/buildkite/check-haskell-nix-cabal.sh'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Check code format'
    key: code-format
    depends_on: linux-nix
    command: 'nix develop --command .buildkite/check-code-format.sh'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Check HLint'
    key: hlint
    depends_on: linux-nix
    command: 'nix develop --command bash -c "echo +++ HLint ; hlint lib"'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Validate OpenAPI Specification'
    key: openapi
    depends_on: linux-nix
    command: 'nix develop --command bash -c "echo +++ openapi-spec-validator ; openapi-spec-validator --schema 3.0.0 specifications/api/swagger.yaml"'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Print TODO list'
    depends_on: linux-nix
    command: 'nix develop --command scripts/todo-list.sh'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Lint bash shell scripts'
    key: lint-bash
    depends_on: linux-nix
    commands:
      - 'echo +++ Shellcheck'
      - './scripts/shellcheck.sh'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Check HLS works'
    key: hls
    depends_on: linux-nix
    command: |
        nix develop --command bash -c "haskell-language-server lib/wallet/src/Cardano/Wallet.hs"
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - block: 'Run benchmarks'
    if: '(build.branch !~ /^gh-readonly-queue\/master/) && (build.branch != "master") && (build.branch !~ /^release-candidate/) && (build.branch != "rc-latest")'
    depends_on: linux-nix
    key: trigger-benchmarks

  - label: 'API benchmark'
    command: |
      export BENCHMARK_CSV_FILE="`pwd`/bench-results.csv"
      "./.buildkite/bench-api.sh"
    depends_on: trigger-benchmarks
    timeout_in_minutes: 20
    agents:
      system: x86_64-linux
    artifact_paths: [ "./bench-results.csv" ]
    env:
      TMPDIR: "/cache"

  - label: 'Latency benchmark'
    command: |
      export BENCHMARK_CSV_FILE="`pwd`/bench-results.csv"
      ./.buildkite/bench-latency.sh
    depends_on: trigger-benchmarks
    timeout_in_minutes: 20
    agents:
      system: x86_64-linux
    artifact_paths: [ "./bench-results.csv" ]
    env:
      TMPDIR: "/cache"

  - label: 'DB benchmark'
    command: |
      export BENCHMARK_CSV_FILE="`pwd`/bench-results.csv"
      ./.buildkite/bench-db.sh
    depends_on: trigger-benchmarks
    timeout_in_minutes: 50
    agents:
      system: x86_64-linux
    artifact_paths: [ "./bench-results.csv" ]
    env:
      TMPDIR: "/cache"

  - label: 'Read-blocks benchmark'
    command: |
      export BENCHMARK_CSV_FILE="`pwd`/bench-results.csv"
      ./.buildkite/bench-read-blocks.sh
    depends_on: trigger-benchmarks
    timeout_in_minutes: 20
    agents:
      system: x86_64-linux
    artifact_paths: [ "./bench-results.csv" ]
    env:
      TMPDIR: "/cache"

  - label: 'memory benchmark'
    command: |
      export BENCHMARK_CSV_FILE="`pwd`/bench-results.csv"
      ./.buildkite/bench-memory.sh
    depends_on: trigger-benchmarks
    timeout_in_minutes: 20
    agents:
      system: x86_64-linux
    artifact_paths: [ "./bench-results.csv" ]
    env:
      TMPDIR: "/cache"

  - block: "macOS steps"
    if: |
      build.branch !~ /^gh-readonly-queue\/master/
        && build.branch != "master"
        && build.branch !~ /^release-candidate/
        && build.branch != "rc-latest"
    depends_on: linux-nix
    key: trigger-macos

  - label: 'Check nix (macOS)'
    depends_on: trigger-macos
    key: macos-nix
    commands:
      - 'nix flake info'
    agents:
      system: ${macos}

  - label: 'Run unit tests (macOS, x86_64)'
    key: macos-intel-tests-run-unit
    depends_on: macos-nix
    command: 'nix build -L .#ci.x86_64-darwin.tests.run.unit'
    agents:
      system: ${macos}

  - label: 'Run unit tests (macOS, arm64)'
    key: macos-arm64-tests-run-unit
    depends_on: macos-nix
    command: 'nix build -L .#ci.aarch64-darwin.tests.run.unit'
    agents:
      system: ${macos}

  - label: 'Build integration tests (macOS, arm64)'
    key: macos-arm64-tests-build-integration
    depends_on: macos-nix
    command: nix build -L .#packages.aarch64-darwin.integration-exe
    agents:
      system: ${macos}
      queue: "cardano-wallet"

  - label: 'Build package (macOS, x86_64)'
    key: macos-intel-package
    depends_on: macos-nix
    command: 'nix build -o result/macos-intel .#packages.x86_64-darwin.ci.artifacts.macos-intel.release'
    artifact_paths: [ "./result/macos-intel/**" ]
    agents:
      system: ${macos}

  - label: 'Build package (macOS, arm64)'
    key: macos-arm64-package
    depends_on: macos-nix
    command: 'nix build -o result/macos-silicon .#packages.aarch64-darwin.ci.artifacts.macos-silicon.release'
    artifact_paths: [ "./result/macos-silicon/**" ]
    agents:
      system: ${macos}

  - block: "Build package (linux)"
    if: |
      build.branch !~ /^gh-readonly-queue\/master/
        && build.branch != "master"
        && build.branch !~ /^release-candidate/
        && build.branch != "rc-latest"
    depends_on: linux-nix
    key: trigger-build-linux-package

  - label: 'Build package (linux)'
    key: linux-package
    depends_on: [linux-nix, trigger-build-linux-package]
    command: nix build -o result/linux .#ci.artifacts.linux64.release
    artifact_paths: [ "./result/linux/**" ]
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - block: "Build windows artifacts"
    if: |
      build.branch !~ /^gh-readonly-queue\/master/
        && build.branch != "master"
        && build.branch !~ /^release-candidate/
        && build.branch != "rc-latest"
    depends_on: linux-nix
    key: trigger-build-windows-artifacts

  - label: 'Build package (windows)'
    key: windows-package
    depends_on: [linux-nix, trigger-build-windows-artifacts]
    command: nix build -o result/windows .#ci.artifacts.win64.release
    artifact_paths: [ "./result/windows/**" ]
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: 'Build testing bundle (windows)'
    key: windows-testing-bundle
    depends_on: [linux-nix, trigger-build-windows-artifacts]
    command: nix build -o result/windows-tests .#ci.artifacts.win64.tests
    artifact_paths: [ "./result/windows-tests/**" ]
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - block: "Run E2E tests"
    if: |
      build.branch !~ /^gh-readonly-queue\/master/
        && build.branch != "master"
        && build.branch !~ /^release-candidate/
        && build.branch != "rc-latest"
    depends_on: linux-nix
    key: trigger-e2e-tests

  - label: "Run E2E tests"
    key: e2e
    depends_on: trigger-e2e-tests
    command: 'nix develop --command bash -c "just e2e-local"'
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"

  - label: Manage rc-latest tags
    depends_on:
      - cabal-release
      - linux-tests-unit
      - linux-tests-integration-babbage
      - linux-tests-integration-conway
      - macos-arm64-tests-run-unit
      - macos-arm64-tests-build-integration
      - macos-intel-tests-run-unit
      - cabal-configure
      - code-format
      - hlint
      - openapi
      - lint-bash
      - hls
      - build-benchmarks
      - macos-arm64-package
      - macos-intel-package
      - linux-package
      - windows-package
      - windows-testing-bundle
      - e2e
    if: build.branch =~ /^release-candidate/
    command: .buildkite/retag-rc-latest.sh
    agents:
      system: ${linux}
    env:
      TMPDIR: "/cache"
