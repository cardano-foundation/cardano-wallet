agents:
  queue: cardano-wallet

env:
  LC_ALL: "C.UTF-8"
  NIX_PATH: "channel:nixos-21.11"
  STATE_DIR: "/var/lib/buildkite-agent/cache"
  STATE_DIR_MACOS: "/var/lib/buildkite-agent-hal-mac/cache"
  RELEASE_SCRIPTS_DIR: "./scripts/buildkite/release"
  MAIN_PIPELINE_DIR: "./scripts/buildkite/main"
  # Mithril variables
  PREPROD_AGGREGATOR_ENDPOINT: https://aggregator.release-preprod.api.mithril.network/aggregator
  PREPROD_GENESIS_VERIFICATION_KEY: 5b3132372c37332c3132342c3136312c362c3133372c3133312c3231332c3230372c3131372c3139382c38352c3137362c3139392c3136322c3234312c36382c3132332c3131392c3134352c31332c3233322c3234332c34392c3232392c322c3234392c3230352c3230352c33392c3233352c34345d

  # Per-host variables - shared across containers on host
  macos: "aarch64-darwin"
  linux: "x86_64-linux"
  windows: "windows-x64"

steps:

  - label: Check Nix (linux)
    # Check whether regenerate.sh was applied when it had to be applied.
    key: linux-nix
    commands:
      - nix --version
      - nix/regenerate.sh
    agents:
      system: ${linux}

  - label: Dev Shell Attic Cache (linux)
    depends_on:
      - linux-nix
    commands:
      - nix develop path:$MAIN_PIPELINE_DIR -c $MAIN_PIPELINE_DIR/attic-cache.sh
    agents:
      system: ${linux}
    env:
      system: ${linux}

  - label: Check Nix (macOS)
    key: macos-nix
    commands:
        - nix --version
        - nix flake info
    agents:
      system: ${macos}

  - label: Dev Shell Attic Cache (macos)
    depends_on:
      - macos-nix
    commands:
      - nix develop path:$MAIN_PIPELINE_DIR -c $MAIN_PIPELINE_DIR/attic-cache.sh
    agents:
      system: ${macos}
    env:
      system: ${macos}

  - group: Linux Artifacts
    key: linux-artifacts
    depends_on:
      - linux-nix
    steps:
    - label: Nix Build (linux)
      commands:
        - nix build .#cardano-wallet
      agents:
        system: ${linux}

    - label: Build package (linux)
      key: linux-package
      depends_on:
      command: ./scripts/buildkite/main/linux-package.sh
      artifact_paths: [ "./result/linux/**" ]
      agents:
        system: ${linux}


  - group: Linux Checks
    if: build.env("RELEASE_CANDIDATE") == null || build.env("TEST_RC") == "FALSE"
    key: linux-tests
    depends_on:
      - linux-artifacts
    steps:

    - label: Run Local Cluster Tests (linux)
      key: local-cluster-tests
      depends_on: []
      timeout_in_minutes: 10
      command: |
        mkdir local-cluster-logs
        nix shell "nixpkgs#just" -c just test-local-cluster
      agents:
        system: ${linux}
      artifact_paths: [ "./local-cluster-logs/**" ]
      env:
        CLUSTER_LOGS_DIR_PATH: local-cluster-logs

    - label: Run Unit Tests (linux)
      key: linux-tests-unit
      depends_on: []
      command: 'nix build -L .#ci.${linux}.tests.run.unit'
      agents:
        system: ${linux}

    - label: Conway Integration Tests (linux)
      key: linux-tests-integration-conway
      depends_on: []
      command: |
          mkdir integration-test-dir
          export CLUSTER_LOGS_DIR_PATH=integration-test-dir/cluster.logs
          export INTEGRATION_TEST_DIR=integration-test-dir
          nix shell 'nixpkgs#just' -c just conway-integration-tests
      artifact_paths: [ "./integration-test-dir/**" ]
      agents:
        system: ${linux}
      concurrency: 8
      concurrency_group: 'linux-integration-tests'

    - label: Run Haskell E2E Tests (linux)
      command: 'nix develop --command bash -c "just e2e-local"'
      soft_fail:
        - exit_status: 130
      timeout_in_minutes: 5
      agents:
        system: ${linux}

    - block: Run Ruby E2E Tests (linux)
      if: build.env("RELEASE_CANDIDATE") == null
      depends_on: []
      key: trigger-e2e-tests

    - label: Run Ruby Linux E2E Tests (linux)
      depends_on:
        - trigger-e2e-tests
      commands: |
        ./scripts/buildkite/main/download-preprod-snapshot-via-mithril.sh
        ./scripts/buildkite/main/linux-e2e.sh
      artifact_paths:
        - "./result/linux/**"
        - "./logs/**/*"
      env:
        NODE_DB_DIR: "test/e2e/state/node_db/preprod"
        AGGREGATOR_ENDPOINT: "${PREPROD_AGGREGATOR_ENDPOINT}"
        GENESIS_VERIFICATION_KEY: "${PREPROD_GENESIS_VERIFICATION_KEY}"
      agents:
        system: ${linux}
      concurrency: 1
      concurrency_group: 'linux-e2e-tests'

    - label: Preview Network Boot Sync
      timeout_in_minutes: 2
      depends_on: []
      command: |
        cd run/preview/nix
        rm -rf logs
        mkdir -p logs
        rm -rf databases
        ./run.sh sync
      artifact_paths:
        - "./run/preview/nix/logs/*"
      agents:
        system: x86_64-linux
      env:
        SUCCESS_STATUS: syncing
        NODE_LOGS_FILE: ./logs/node.log
        WALLET_LOGS_FILE: ./logs/wallet.log
        CLEANUP_DB: true
        NETWORK: testnet

    - label: Mainnet Boot Sync
      timeout_in_minutes: 2
      depends_on: []
      command: |
        cd run/mainnet/nix
        rm -rf logs
        mkdir -p logs
        rm -rf databases
        ./run.sh sync
      artifact_paths:
        - "./run/mainnet/nix/logs/*"
      agents:
        system: x86_64-linux
      env:
        SUCCESS_STATUS: syncing
        NODE_LOGS_FILE: ./logs/node.log
        WALLET_LOGS_FILE: ./logs/wallet.log
        CLEANUP_DB: true
        NETWORK: mainnet

    - block: Mainnet Boot Sync with Mithril
      if: build.env("RELEASE_CANDIDATE") == null
      depends_on: []
      key: linux-mainnet-full-sync-block

    - label: Mainnet Boot Sync with Mithril
      timeout_in_minutes: 120
      # mithril is not compiling with nix ATM
      soft_fail :
        - exit_status: 44
      depends_on:
        - linux-mainnet-full-sync-block
      command: |
        cd run/mainnet/nix
        rm -rf logs
        mkdir -p logs
        rm -rf databases
        ./run.sh sync
      artifact_paths:
        - "./run/mainnet/nix/logs/*"
      agents:
        system: x86_64-linux
      env:
        SUCCESS_STATUS: ready
        NODE_LOGS_FILE: ./logs/node.log
        WALLET_LOGS_FILE: ./logs/wallet.log
        CLEANUP_DB: true
        NETWORK: mainnet
        USE_MITHRIL: true
      concurrency: 1
      concurrency_group: 'mithril-mainnet-full-sync'

  - group: Code Quality Checks
    key: code-quality
    if: build.env("RELEASE_CANDIDATE") == null || build.env("TEST_RC") == "FALSE"
    depends_on:
      - linux-nix
    steps:

    - label: Check Cabal Configure
      key: cabal-configure
      depends_on: []
      command: 'nix develop --command scripts/buildkite/check-haskell-nix-cabal.sh'
      agents:
        system: ${linux}

    - label: Check Code Format
      key: code-format
      depends_on: []
      command: 'nix develop --command scripts/buildkite/main/check-code-format.sh'
      agents:
        system: ${linux}

    - label: Check HLint
      key: hlint
      depends_on: []
      command: 'nix develop --command bash -c "echo +++ HLint ; hlint lib"'
      agents:
        system: ${linux}

    - label: Validate Swagger File
      key: openapi
      depends_on: []
      commands:
        - nix develop path:$MAIN_PIPELINE_DIR -c $MAIN_PIPELINE_DIR/validate-swagger.sh
      artifacts:
        - artifacts/api-diffs.md
      env:
        RELEASE: false
      agents:
        system: ${linux}

    - label: Print TODO List
      command: 'nix develop --command scripts/todo-list.sh'
      depends_on: []
      agents:
        system: ${linux}

    - label: Lint Bash Shell Scripts
      key: lint-bash
      depends_on: []
      commands:
        - 'echo +++ Shellcheck'
        - './scripts/shellcheck.sh'
      agents:
        system: ${linux}

    - label: Check HLS Works
      key: hls
      depends_on: []
      command:
          nix develop --command bash -c "haskell-language-server lib/wallet/src/Cardano/Wallet.hs"
      agents:
        system: ${linux}
      env:
        TMPDIR: "/cache"

    - block: Cabal Build
      if: |
        build.branch !~ /^gh-readonly-queue\/master/
            && build.branch != "master"
            && build.env("RELEASE_CANDIDATE") == null
      depends_on: []
      key: cabal-release-block

    - label: Cabal Build (linux)
      key: cabal-release
      depends_on: cabal-release-block
      command: |
        nix develop -c cabal update
        nix develop -c cabal build all -frelease
      agents:
        system: ${linux}

  - group: Linux Benchmarks
    key: linux-benchmarks
    depends_on: linux-nix
    steps:

    - label: Build Benchmarks (linux)
      command:
        - nix build .#ci.benchmarks.all
      agents:
        system: ${linux}

    - block: Run Benchmarks
      if: build.env("RELEASE_CANDIDATE") == null || build.env("TEST_RC") == "TRUE"
      depends_on: []
      key: trigger-benchmarks

    - label: Nix build on benchmark queue (linux)
      key: nix-build-benchmarks
      depends_on: trigger-benchmarks
      command:
        - nix build
        - nix build .#ci.benchmarks.all
      agents:
        system: ${linux}
        queue: adrestia-bench

    - label: API Benchmark (linux)
      command: |
        export BENCHMARK_CSV_FILE="`pwd`/bench-results.csv"
        "./scripts/buildkite/main/bench-api.sh"
      depends_on:
        - nix-build-benchmarks
      timeout_in_minutes: 20
      agents:
        system: x86_64-linux
        queue: adrestia-bench
      artifact_paths: [ "./bench-results.csv" ]
      concurrency: 4
      concurrency_group: 'concurrent-benchmarks'
      key: api-benchmark

    - label: Latency Benchmark (linux)
      command: |
        export BENCHMARK_CSV_FILE="`pwd`/bench-results.csv"
        ./scripts/buildkite/main/bench-latency.sh
      depends_on:
        - nix-build-benchmarks
      timeout_in_minutes: 30
      agents:
        system: x86_64-linux
        queue: adrestia-bench
      artifact_paths: [ "./bench-results.csv" ]
      concurrency: 4
      concurrency_group: 'concurrent-benchmarks'
      key: latency-benchmark

    - label: DB Benchmark (linux)
      command: |
        export BENCHMARK_CSV_FILE="`pwd`/bench-results.csv"
        ./scripts/buildkite/main/bench-db.sh
      depends_on:
        - nix-build-benchmarks
      timeout_in_minutes: 50
      agents:
        system: x86_64-linux
        queue: adrestia-bench
      artifact_paths: [ "./bench-results.csv" ]
      concurrency: 4
      concurrency_group: 'concurrent-benchmarks'
      key: db-benchmark

    - label: Read-blocks Benchmark (linux)
      command: |
        export BENCHMARK_CSV_FILE="`pwd`/bench-results.csv"
        ./scripts/buildkite/main/bench-read-blocks.sh
      depends_on:
        - nix-build-benchmarks
      timeout_in_minutes: 20
      agents:
        system: x86_64-linux
        queue: adrestia-bench
      artifact_paths: [ "./bench-results.csv" ]
      concurrency: 4
      concurrency_group: 'concurrent-benchmarks'
      key: read-blocks-benchmark

    - label: Memory Benchmark (linux)
      command: |
        export BENCHMARK_CSV_FILE="`pwd`/bench-results.csv"
        ./scripts/buildkite/main/bench-memory.sh
      depends_on:
        - nix-build-benchmarks
      timeout_in_minutes: 20
      agents:
        system: x86_64-linux
        queue: adrestia-bench
      artifact_paths: [ "./bench-results.csv" ]
      concurrency: 4
      concurrency_group: 'concurrent-benchmarks'
      key: memory-benchmark

    - label: Benchmarks history
      if: build.env("RELEASE_CANDIDATE") != null
      depends_on:
        - api-benchmark
        - latency-benchmark
        - db-benchmark
        - read-blocks-benchmark
        - memory-benchmark
        - trigger-benchmarks
      artifact_paths:
        - ./benchmark-history*.tgz
        - ./benchmark-history.csv
      command: |
        ./scripts/buildkite/main/benchmark-history.sh
      agents:
        system: x86_64-linux
      key: benchmarks-history

  - group: MacOS Artifacts
    key: macos-artifacts
    depends_on: macos-nix
    steps:

    - block: MacOS Artifacts
      if: |
        build.branch !~ /^gh-readonly-queue\/master/
          && build.branch != "master"
          && build.env("RELEASE_CANDIDATE") == null
      key: block-macos

    - label: Build Integration Tests (macOS, arm64)
      key: macos-arm64-tests-build-integration
      if: build.env("TEST_RC") == null || build.env("TEST_RC") == "FALSE"
      depends_on: block-macos
      command: nix build -L .#packages.aarch64-darwin.integration-exe
      agents:
        system: ${macos}
        queue: "cardano-wallet"

    - label: Build Package (macOS, x86_64)
      key: macos-intel-package
      depends_on: block-macos
      command: 'nix build -o result/macos-intel .#packages.x86_64-darwin.ci.artifacts.macos-intel.release'
      artifact_paths: [ "./result/macos-intel/**" ]
      agents:
        system: ${macos}

    - label: Build Package (macOS, arm64)
      key: macos-arm64-package
      depends_on: block-macos
      command: 'nix build -o result/macos-silicon .#packages.aarch64-darwin.ci.artifacts.macos-silicon.release'
      artifact_paths: [ "./result/macos-silicon/**" ]
      agents:
        system: ${macos}

  - group: MacOS Checks
    key: "macos-checks"
    if: build.env("RELEASE_CANDIDATE") == null || build.env("TEST_RC") == "FALSE"
    depends_on:
      - macos-artifacts
    steps:

    - block: MacOS Unit Tests
      if: |
        build.branch !~ /^gh-readonly-queue\/master/
          && build.branch != "master"
          && build.env("RELEASE_CANDIDATE") == null
      depends_on: []
      key: macos-unit-tests-block

    - label: Run Unit Tests (macOS, x86_64)
      key: macos-intel-tests-run-unit
      depends_on: macos-unit-tests-block
      command: 'nix build -L .#ci.x86_64-darwin.tests.run.unit'
      agents:
        system: ${macos}

    - label: Run Unit Tests (macOS, arm64)
      key: macos-arm64-tests-run-unit
      depends_on: macos-unit-tests-block
      command: 'nix build -L .#ci.aarch64-darwin.tests.run.unit'
      agents:
        system: ${macos}

    - block: MacOS Integration Tests
      # if: build.env("RELEASE_CANDIDATE") == null
      depends_on: []
      key: macos-integration-tests-block

    - label: Run Integration Tests (macOS)
      key: macos-tests-integration
      depends_on: macos-integration-tests-block
      command: nix shell 'nixpkgs#just' -c just conway-integration-tests
      agents:
        system: ${macos}
        queue: "cardano-wallet"
      concurrency: 3
      concurrency_group: 'macos-integration-tests'

    - block: MacOS E2E Tests
      if: build.env("RELEASE_CANDIDATE") == null || build.env("TEST_RC") == "TRUE"
      depends_on: []
      key: macos-e2e-tests-block

    - label: 'Run E2E Tests (macOS, arm64)'
      key: macos-silicon-e2e
      depends_on:
        - macos-e2e-tests-block
      command:
        - nix develop path:./scripts/buildkite/release -c ./scripts/buildkite/main/download-preprod-snapshot-via-mithril.sh
        - nix develop path:./scripts/buildkite/release -c ./scripts/buildkite/main/macos-silicon-e2e.sh
      artifact_paths:
        - "./logs/**/*"
      env:
        NODE_DB_DIR: "test/e2e/state/node_db/preprod"
        AGGREGATOR_ENDPOINT: "${PREPROD_AGGREGATOR_ENDPOINT}"
        GENESIS_VERIFICATION_KEY: "${PREPROD_GENESIS_VERIFICATION_KEY}"
      agents:
        system: ${macos}
      concurrency: 1
      concurrency_group: 'macos-e2e-tests'

  - group: Windows Artifacts
    key: windows-artifacts
    depends_on:
      - linux-nix
    steps:
    - block: Build Windows Artifacts (windows)
      depends_on: []
      if: |
        build.branch !~ /^gh-readonly-queue\/master/
          && build.branch != "master"
          && build.branch != "rc-latest"
          && build.env("RELEASE_CANDIDATE") == null
      key: trigger-build-windows-artifacts

    - label: 💎 Configure Ruby
      key: windows-ruby
      commands:
          - cd test\e2e
          - bundle install
      agents:
          system: ${windows}

    - label: Build Package (windows)
      key: windows-package
      depends_on:
        - trigger-build-windows-artifacts
      command: nix build -o result/windows .#ci.artifacts.win64.release
      artifact_paths: [ "./result/windows/**" ]
      agents:
        system: ${linux}


    - label: Build Testing Bundle (windows)
      key: windows-testing-bundle
      depends_on:
        - trigger-build-windows-artifacts
      command: nix build -o result/windows-tests .#ci.artifacts.win64.tests
      artifact_paths: [ "./result/windows-tests/**" ]
      agents:
        system: ${linux}

  - group: Windows Checks
    depends_on:
      - windows-artifacts
    if: build.env("RELEASE_CANDIDATE") == null || build.env("TEST_RC") == "FALSE"
    steps:
    - label: Windows Unit Tests
      command: |
        cd test\e2e
        bundle exec rake get_latest_windows_tests[%BUILDKITE_BRANCH%,cardano-wallet-tests-win64,any,latest]
        cd cardano-wallet-tests-win64
        .\cardano-wallet-unit-test-unit.exe --color --jobs 1 --skip /Cardano.Wallet.DB.Sqlite/ +RTS -M2G -N2
      agents:
        system: ${windows}
      env:
        LOCAL_CLUSTER_CONFIGS: test\data\cluster-configs
    - label: Windows Text Class Tests
      command: |
        cd test\e2e
        bundle exec rake get_latest_windows_tests[%BUILDKITE_BRANCH%,cardano-wallet-tests-win64,any,latest]
        cd cardano-wallet-tests-win64
        .\text-class-test-unit.exe --color
      agents:
        system: ${windows}

    - block: Windows E2E Tests
      depends_on: []
      if: build.env("RELEASE_CANDIDATE") == null || build.env("TEST_RC") == "TRUE"
      key: trigger-windows-e2e-tests

    - label: ⚙️ Windows E2E Tests
      depends_on:
        - trigger-windows-e2e-tests
      commands:
        - ./scripts/buildkite/main/windows-e2e.bat
      agents:
        system: ${windows}
      env:
        TESTS_E2E_FIXTURES: "$FIXTURE_DECRYPTION_KEY"
        NODE_DB_DIR: "test\\e2e\\state\\node_db\\preprod"
        AGGREGATOR_ENDPOINT: "${PREPROD_AGGREGATOR_ENDPOINT}"
        GENESIS_VERIFICATION_KEY: "${PREPROD_GENESIS_VERIFICATION_KEY}"
      concurrency: 1
      concurrency_group: 'windows-e2e-tests'

  - group: Docker
    key: docker-artifacts

    if: build.env("RELEASE_CANDIDATE") != null
    depends_on:
      - linux-artifacts
    steps:

      - label: Build Docker Image
        key: docker-build
        commands:
          ./scripts/buildkite/main/docker-build.sh
        artifact_paths:
          - ./artifacts/*.tgz
        agents:
          system: x86_64-linux

  - group: Docker Checks
    depends_on:
      - docker-artifacts
    key: docker-e2e
    if: (build.env("RELEASE_CANDIDATE") != null && build.env("TEST_RC") == "FALSE") || build.tag =~ /^v20/
    steps:
      - label: Mainnet Boot Sync
        timeout_in_minutes: 30
        command: |
          cd run/mainnet/docker
          export WALLET_TAG=$(buildkite-agent meta-data get "release-cabal-version")
          rm -rf databases
          ./run.sh sync
        agents:
          system: x86_64-linux
        env:
          SUCCESS_STATUS: syncing
          USE_LOCAL_IMAGE: true

      - label: Mainnet Boot Sync via Mithril
        timeout_in_minutes: 120
        command: |
          cd run/mainnet/docker
          export WALLET_TAG=$(buildkite-agent meta-data get "release-cabal-version")
          rm -rf databases
          ./run.sh sync
        agents:
          system: x86_64-linux
        env:
          SUCCESS_STATUS: ready
          USE_MITHRIL: true
          USE_LOCAL_IMAGE: true
        concurrency: 1
        concurrency_group: 'mithril-mainnet-full-sync'

      - label: Preview Network Boot Sync
        timeout_in_minutes: 30
        command: |
          cd run/preview/docker
          export WALLET_TAG=$(buildkite-agent meta-data get "release-cabal-version")
          rm -rf databases
          ./run.sh sync
        agents:
          system: x86_64-linux
        env:
          SUCCESS_STATUS: syncing
          USE_LOCAL_IMAGE: true

