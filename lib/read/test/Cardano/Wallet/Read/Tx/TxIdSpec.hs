{-# LANGUAGE GADTs #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeOperators #-}

module Cardano.Wallet.Read.Tx.TxIdSpec
    ( spec
    ) where

import Prelude

import Cardano.Read.Ledger.Tx.CBOR
    ( deserializeTx
    )
import Cardano.Wallet.Read.Eras
    ( IsEra
    , K (..)
    , (:.:) (Comp)
    )
import Cardano.Wallet.Read.Hash
    ( hashFromBytesAsHex
    )
import Cardano.Wallet.Read.Tx
    ( Tx
    )
import Cardano.Wallet.Read.Tx.TxId
    ( TxId
    , getTxId
    , txIdFromHash
    )
import Data.ByteArray.Encoding
    ( Base (..)
    , convertFromBase
    )
import Data.ByteString
    ( ByteString
    )
import Data.ByteString.Lazy
    ( fromStrict
    )
import Data.Maybe
    ( fromMaybe
    )
import Test.Hspec
    ( Spec
    , describe
    , it
    )
import Test.QuickCheck
    ( Property
    , (===)
    )

import qualified Cardano.Wallet.Read as Read
import qualified Data.ByteString.Lazy as BL

spec :: Spec
spec =
    describe "TxId golden tests" $ do
        it "byron tx" $ do
            prop_matches_TxId byronTx byronTxId
        it "shelley tx" $
            prop_matches_TxId shelleyTx shelleyTxId
        it "allegra tx" $
            prop_matches_TxId allegraTx allegraTxId
        it "mary tx" $
            prop_matches_TxId maryTx maryTxId
        it "alonzo tx" $
            prop_matches_TxId alonzoTx alonzoTxId
        it "babbage tx" $
            prop_matches_TxId babbageTx babbageTxId

prop_matches_TxId :: forall era. IsEra era => Tx era -> TxId -> Property
prop_matches_TxId tx txId = getTxId tx === txId

byronTxId :: TxId
byronTxId = unsafeTxIdFromHex
    "376293e16cf87c377dce58ea6efd256276f86454fc13d390f673db789dcd7104"

-- This transaction was assembled from the CBOR using
-- https://github.com/IntersectMBO/cardano-ledger
--   /blob/0a098670a7cf0d084c4087d4140f704f82784977
--      /eras/byron/ledger/impl/test/golden/cbor/utxo/Tx
--      /eras/byron/ledger/impl/test/golden/cbor/utxo/TxWitness
byronTx :: Tx Read.Byron
byronTx = unsafeParseEraTxFromHex
    "82839f8200d81858258258204ba839c420b3d2bd439530f891cae9\
    \a5d4c4d812044630dac72e8e0962feeecc182fff9f8282d8185821\
    \83581caa5372095aaa680d19d4ca496983a145709c3be18b0d4c83\
    \cb7bdc5ea0001a32dc988e182fffa0818200D81858858258404B6D\
    \7977346C4453453553346653483665744E6F756958657A4379456A\
    \4B63337447346A61306B466A4F38717A616932365A4D5055454A66\
    \457931356F78356B5840688AAD857BC7FF30FC6862DA1BE281F420\
    \C65271B76AB19782FF40E2955AF88819C38E5C79138F28073ABAE1\
    \52C882258B4420A0C1C9FDD26C98812697FC3E00\
    \"

shelleyTxId :: TxId
shelleyTxId = unsafeTxIdFromHex
    "ca011f22d07b97ee17f6f2e2ef568b9521791608169425e92993c8c6e5541d79"

shelleyTx :: Tx Read.Shelley
shelleyTx = unsafeParseEraTxFromHex
    "83a400828258200000000000000000000000000000000000000000\
    \000000000000000000000000008258200000000000000000000000\
    \000000000000000000000000000000000000000000010183825839\
    \010202020202020202020202020202020202020202020202020202\
    \020202020202020202020202020202020202020202020202020202\
    \0202021a005b8d8082583901030303030303030303030303030303\
    \030303030303030303030303030303030303030303030303030303\
    \03030303030303030303030303031a005b8d808258390104040404\
    \040404040404040404040404040404040404040404040404040404\
    \040404040404040404040404040404040404040404040404041a00\
    \7801e0021a0002102003191e46a10282845820130ae82201d7072e\
    \6fbfc0a1884fb54636554d14945b799125cf7ce38d477f51584058\
    \35ff78c6fc5e4466a179ca659fa85c99b8a3fba083f3f3f42ba360\
    \d479c64ef169914b52ade49b19a7208fd63a6e67a19c406b482660\
    \8fdc5307025506c307582001010101010101010101010101010101\
    \0101010101010101010101010101010144a1024100845820010000\
    \000000000000000000000000000000000000000000000000000000\
    \00005840e8e769ecd0f3c538f0a5a574a1c881775f086d6f4c845b\
    \81be9b78955728bffa7efa54297c6a5d73337bd6280205b1759c13\
    \f79d4c93f29871fc51b78aeba80e58200000000000000000000000\
    \00000000000000000000000000000000000000000044a1024100f6"

allegraTxId :: TxId
allegraTxId = unsafeTxIdFromHex
    "ca011f22d07b97ee17f6f2e2ef568b9521791608169425e92993c8c6e5541d79"

allegraTx :: Tx Read.Allegra
allegraTx = unsafeParseEraTxFromHex
    "83a400828258200000000000000000000000000000000000000000\
    \000000000000000000000000008258200000000000000000000000\
    \000000000000000000000000000000000000000000010183825839\
    \010202020202020202020202020202020202020202020202020202\
    \020202020202020202020202020202020202020202020202020202\
    \0202021a005b8d8082583901030303030303030303030303030303\
    \030303030303030303030303030303030303030303030303030303\
    \03030303030303030303030303031a005b8d808258390104040404\
    \040404040404040404040404040404040404040404040404040404\
    \040404040404040404040404040404040404040404040404041a00\
    \7801e0021a0002102003191e46a10282845820130ae82201d7072e\
    \6fbfc0a1884fb54636554d14945b799125cf7ce38d477f51584058\
    \35ff78c6fc5e4466a179ca659fa85c99b8a3fba083f3f3f42ba360\
    \d479c64ef169914b52ade49b19a7208fd63a6e67a19c406b482660\
    \8fdc5307025506c307582001010101010101010101010101010101\
    \0101010101010101010101010101010144a1024100845820010000\
    \000000000000000000000000000000000000000000000000000000\
    \00005840e8e769ecd0f3c538f0a5a574a1c881775f086d6f4c845b\
    \81be9b78955728bffa7efa54297c6a5d73337bd6280205b1759c13\
    \f79d4c93f29871fc51b78aeba80e58200000000000000000000000\
    \00000000000000000000000000000000000000000044a1024100f6"

maryTxId :: TxId
maryTxId = unsafeTxIdFromHex
    "ca011f22d07b97ee17f6f2e2ef568b9521791608169425e92993c8c6e5541d79"

maryTx :: Tx Read.Mary
maryTx = unsafeParseEraTxFromHex
    "83a400828258200000000000000000000000000000000000000000\
    \000000000000000000000000008258200000000000000000000000\
    \000000000000000000000000000000000000000000010183825839\
    \010202020202020202020202020202020202020202020202020202\
    \020202020202020202020202020202020202020202020202020202\
    \0202021a005b8d8082583901030303030303030303030303030303\
    \030303030303030303030303030303030303030303030303030303\
    \03030303030303030303030303031a005b8d808258390104040404\
    \040404040404040404040404040404040404040404040404040404\
    \040404040404040404040404040404040404040404040404041a00\
    \7801e0021a0002102003191e46a10282845820130ae82201d7072e\
    \6fbfc0a1884fb54636554d14945b799125cf7ce38d477f51584058\
    \35ff78c6fc5e4466a179ca659fa85c99b8a3fba083f3f3f42ba360\
    \d479c64ef169914b52ade49b19a7208fd63a6e67a19c406b482660\
    \8fdc5307025506c307582001010101010101010101010101010101\
    \0101010101010101010101010101010144a1024100845820010000\
    \000000000000000000000000000000000000000000000000000000\
    \00005840e8e769ecd0f3c538f0a5a574a1c881775f086d6f4c845b\
    \81be9b78955728bffa7efa54297c6a5d73337bd6280205b1759c13\
    \f79d4c93f29871fc51b78aeba80e58200000000000000000000000\
    \00000000000000000000000000000000000000000044a1024100f6"

alonzoTxId :: TxId
alonzoTxId = unsafeTxIdFromHex
    "ca011f22d07b97ee17f6f2e2ef568b9521791608169425e92993c8c6e5541d79"

alonzoTx :: Tx Read.Alonzo
alonzoTx = unsafeParseEraTxFromHex
    "84a400828258200000000000000000000000000000000000000000\
    \000000000000000000000000008258200000000000000000000000\
    \000000000000000000000000000000000000000000010183825839\
    \010202020202020202020202020202020202020202020202020202\
    \020202020202020202020202020202020202020202020202020202\
    \0202021a005b8d8082583901030303030303030303030303030303\
    \030303030303030303030303030303030303030303030303030303\
    \03030303030303030303030303031a005b8d808258390104040404\
    \040404040404040404040404040404040404040404040404040404\
    \040404040404040404040404040404040404040404040404041a00\
    \7801e0021a0002102003191e46a10282845820130ae82201d7072e\
    \6fbfc0a1884fb54636554d14945b799125cf7ce38d477f51584058\
    \35ff78c6fc5e4466a179ca659fa85c99b8a3fba083f3f3f42ba360\
    \d479c64ef169914b52ade49b19a7208fd63a6e67a19c406b482660\
    \8fdc5307025506c307582001010101010101010101010101010101\
    \0101010101010101010101010101010144a1024100845820010000\
    \000000000000000000000000000000000000000000000000000000\
    \00005840e8e769ecd0f3c538f0a5a574a1c881775f086d6f4c845b\
    \81be9b78955728bffa7efa54297c6a5d73337bd6280205b1759c13\
    \f79d4c93f29871fc51b78aeba80e58200000000000000000000000\
    \00000000000000000000000000000000000000000044a1024100f5\
    \f6"

babbageTxId :: TxId
babbageTxId = unsafeTxIdFromHex
    "1b81e33957d8b96e17a142ae06004213d25dc6abed0fc3949a16f3a96eb2a093"

babbageTx :: Tx Read.Babbage
babbageTx = unsafeParseEraTxFromHex
    "84a400818258200000000000000000000000000000000000000000\
    \000000000000000000000000000182a20058390101010101010101\
    \010101010101010101010101010101010101010101010101010101\
    \01010101010101010101010101010101010101010101011a001e84\
    \80a200583901020202020202020202020202020202020202020202\
    \020202020202020202020202020202020202020202020202020202\
    \0202020202020202011a0078175c021a0001faa403191e46a10281\
    \845820010000000000000000000000000000000000000000000000\
    \000000000000000058407154db81463825f150bb3b9b0824caf151\
    \3716f73498afe61d917a5621912a2b3df252bea14683a9ee56710d\
    \483a53a5aa35247e0d2b80e6300f7bdec763a20458200000000000\
    \000000000000000000000000000000000000000000000000000000\
    \44a1024100f5f6"

-- | Parse a hex-encoded transaction into a particular era.
unsafeParseEraTxFromHex
    :: forall era. IsEra era
    => ByteString
    -> Tx era
unsafeParseEraTxFromHex bytes =
    either (error . show) id
    . unComp
    $ deserializeTx
        (K (unsafeReadBase16 bytes) :: K BL.ByteString era)
  where
    unComp :: (f :.: g) era -> f (g era)
    unComp (Comp fg) = fg

unsafeTxIdFromHex :: ByteString -> TxId
unsafeTxIdFromHex =
    txIdFromHash
    . fromMaybe (error "unsafeTxIdFromHex: invalid hex length")
    . hashFromBytesAsHex

unsafeReadBase16 :: ByteString -> BL.ByteString
unsafeReadBase16 = either reportError fromStrict . convertFromBase Base16
  where
    reportError = error "unsafeReadBase16: input not in Base16"
