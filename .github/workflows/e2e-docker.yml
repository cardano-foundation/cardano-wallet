name: E2E Docker

on:
  schedule:
  - cron:  "0 0 * * *"
  workflow_dispatch:
    inputs:
      nodeTag:
        description: 'Node tag (docker)'
        required: true
        default: '1.34.1'
      walletTag:
        description: 'Wallet tag (docker)'
        required: true
        default: 'dev-master'
      network:
        description: 'Network'
        required: true
        default: 'testnet'
      node_db_cache:
        description: 'Node DB Cache'
        required: true
        default: 'GH'
        type: choice
        options:
        - AWS
        - GH

defaults:
  run:
    working-directory: ./test/e2e

jobs:
  test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Get supported node tag
      run: |
        export TAG=$(cat ../../README.md | grep -o '`master` branch | \[.*\]' | awk '{ print $4 }' | sed -n -e 's/^.*tag\///p' | sed 's/)//g')
        if [ -z "${{github.event.inputs.nodeTag}}" ]; then
          echo "::set-output name=NODE_TAG::$TAG"
          echo "Using cardano-node tag from README.md = $TAG"
        else
          echo "::set-output name=NODE_TAG::${{github.event.inputs.nodeTag}}"
          echo "Using cardano-node tag from workflow trigger parameter = ${{github.event.inputs.nodeTag}}"
        fi
      id: cardano-node-tag

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7.1
        bundler-cache: true

    - name: Install dependencies
      run: bundle install

    - name: ‚öôÔ∏è Setup (get latest bins and configs and decode fixtures)
      run: rake setup[$NETWORK]

    - name: üïí Get Date/Time
      id: date-time
      shell: bash
      run: |
        echo "::set-output name=value::$(rake datetime)"

    - name: üíΩ AWS Cache node db
      if: ${{ env.NODE_DB_CACHE == 'AWS' }}
      run: rake get_latest_node_db[$NETWORK]

    - name: üíæ Cache node db
      if: ${{ env.NODE_DB_CACHE == 'GH' }}
      id: cache
      uses: actions/cache@v2.1.7
      with:
        path: test/e2e/state/node_db/${{ env.NETWORK }}
        key: node-db-docker-${{ env.NETWORK }}-${{ steps.date-time.outputs.value }}
        restore-keys: |
          node-db-docker-${{ env.NETWORK }}-
          node-db-Linux-${{ env.NETWORK }}-

    - name: üíæ Cache wallet db
      id: cache-wallet
      uses: actions/cache@v2.1.7
      with:
        path: test/e2e/state/wallet_db/${{ env.NETWORK }}
        key: wallet-db-${{ runner.os }}-${{ env.NETWORK }}-${{ steps.date-time.outputs.value }}
        restore-keys: |
          wallet-db-docker-${{ env.NETWORK }}-
          wallet-db-Linux-${{ env.NETWORK }}-

    - name: üöÄ Start node and wallet
      run: |
        echo "Wallet: $WALLET"
        echo "Node: ${{steps.cardano-node-tag.outputs.NODE_TAG}}"

        NODE=${{steps.cardano-node-tag.outputs.NODE_TAG}} \
        NODE_CONFIG_PATH=`pwd`/state/configs/$NETWORK \
        DATA=`pwd`/state/node_db/$NETWORK \
        WALLET_DATA=`pwd`/state/wallet_db/$NETWORK \
        docker-compose -f docker-compose-test.yml up --detach

    - name: üîç Display versions
      run: |
        docker run --rm inputoutput/cardano-wallet:$WALLET version
        docker run --rm inputoutput/cardano-node:${{steps.cardano-node-tag.outputs.NODE_TAG}} cli version

    - name: ‚è≥ Wait until node is synced
      run: rake wait_until_node_synced

    - name: üß™ Run all tests
      run: rake spec

    - name: üìñ Get docker logs
      if: always()
      run: rake get_docker_logs

    - name: üìé Upload logs
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: ${{ runner.os }}-docker-logs
        path: test/e2e/state/logs

    - name: Stop docker-compose
      run: NODE_CONFIG_PATH=`pwd`/state/configs/$NETWORK docker-compose -f docker-compose-test.yml down
    env:
      TESTS_E2E_FIXTURES: ${{ secrets.TESTS_E2E_FIXTURES }}
      NETWORK: ${{ github.event.inputs.network || 'testnet' }}
      WALLET: ${{ github.event.inputs.walletTag || 'dev-master' }}
      TESTS_E2E_TOKEN_METADATA: https://metadata.cardano-testnet.iohkdev.io/
      NODE_DB_CACHE: ${{ github.event.inputs.node_db_cache || 'GH' }}
