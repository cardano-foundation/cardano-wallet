--------------------------------------------------------------------------------
-- Cabal project file
-- -----------------------------------------------------------------------------
--
-- Example build command:
--
--   cabal build all --enable-tests --enable-benchmarks -O0
--
-- -----------------------------------------------------------------------------
-- Updating this file
--
-- This file is the canonical source of dependencies.
-- To generate the Nix packages, use  ./nix/regenerate.sh
--
-- -----------------------------------------------------------------------------
-- How to use with the nix shell
--
-- The advantage of building under `nix develop` is that the correct
-- versions of all build and test dependencies are set up for you in the
-- nix shell environment.
--
-- Many dependencies, including Haskell package dependencies,
-- are downloaded from an IOG nix cache.
--
-- To build, start `nix develop`, then run `cabal` inside:
--
--     nix develop
--     cabal build all -O0
--
-- To build with profiling enabled, use:
--
--    nix develop .#profiled
--    cabal configure --enable-tests --enable-benchmarks --enable-profiling
--    cabal build all
--
--------------------------------------------------------------------------------

-- Custom repository for cardano haskell packages, see
-- https://github.com/input-output-hk/cardano-haskell-packages
-- for more information.
repository cardano-haskell-packages
  url: https://input-output-hk.github.io/cardano-haskell-packages
  secure: True
  root-keys:
    3e0cce471cf09815f930210f7827266fd09045445d65923e6d0238a6cd15126f
    443abb7fb497a134c343faf52f0b659bd7999bc06b7f63fa76dc99d631f9bea1
    a86a1f6ce86c449c46666bda44268677abf29b5b2d2eb5ec7af903ec2f117a82
    bcec67e8e99cabfa7764d75ad9b158d72bfacf70ca1d0ec8bc6b4406d1bf8413
    c00aae8461a256275598500ea0e187588c35a5d5d7454fb57eac18d9edb86a56
    d4a35cd3121aa00d18544bb0ac01c3e1691d618f462c46129271bccf39f7e8ee

-- repeating the index-state for hackage to work around hackage.nix parsing limitation
index-state: 2024-01-12T11:04:55Z

index-state:
  , hackage.haskell.org 2024-01-12T11:04:55Z
  , cardano-haskell-packages 2023-12-18T12:30:16Z

packages:
    lib/address-derivation-discovery
  , lib/application-extras
  , lib/balance-tx/
  , lib/cardano-api-extra/
  , lib/crypto-hash-extra/
  , lib/coin-selection/
  , lib/customer-deposit-wallet/
  , lib/delta-store/
  , lib/delta-table
  , lib/delta-types/
  , lib/faucet/
  , lib/iohk-monitoring-extra/
  , lib/launcher/
  , lib/local-cluster/
  , lib/network-layer/
  , lib/numeric/
  , lib/primitive/
  , lib/read
  , lib/std-gen-seed/
  , lib/temporary-extra/
  , lib/test-utils/
  , lib/text-class/
  , lib/wai-middleware-logging/
  , lib/wallet-benchmarks/
  , lib/wallet/
  , lib/wallet-e2e/

--------------------------------------------------------------------------------
-- BEGIN OpenAPI

-- Using a fork until our patches can be merged upstream

-- TODO: ADP-1713
source-repository-package
  type: git
  location: https://github.com/biocad/servant-openapi3
  tag: 4165b837d3a71debd1059c3735460075840000b5
  --sha256: 1dngrr353kjhmwhn0b289jzqz5rf32llwcv79zcyq15ldpqpbib9

-- TODO: ADP-1713
source-repository-package
  type: git
  location: https://github.com/paolino/openapi3
  tag: f22c31611c295637a3e72b341cd1c56d1d87b993
  --sha256: 10l7wlaz9rcr3fysi1vwg7qqa826bb7nidkpx9jy1q7ja7ddw47i

-- END OpenAPI
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- BEGIN Cardano Addresses Dependency

source-repository-package
    type: git
    location: https://github.com/IntersectMBO/cardano-addresses
    tag: 126964483d188c2362393d2a6eea8c65dfc43097
    --sha256: 1w152imj28ap5dfdc8x9ly0cy7dn500v7k63vw11f70gvgg6x7my
    subdir: command-line
            core

-- Normally cabal won't apply ghc-options which we specify to build packages
-- to their "regular" dependencies.
-- However, the dependencies declared using the `source-repository-package`
-- pragma are an exception to this rule.
-- This is why we need to manually control options that are applied to the
-- `cardano-addresses` package by declaring them explicitly here.
--
-- Cardano Addresses CLI uses an outdated version of the `optparse-applicative`
-- library. This causes a deprecation warning to be emitted when building.
-- We don't want to promote this warning to an error level as it break the
-- release build and cardano-addresses codebase is not under our control.
package cardano-addresses-cli
    ghc-options:
        -Wwarn=deprecations

package cardano-addresses
    ghc-options:
        -Wwarn=incomplete-uni-patterns
-- END Cardano Addresses Dependency
--------------------------------------------------------------------------------

source-repository-package
    type: git
    location: https://github.com/input-output-hk/cardano-sl-x509
    tag: a91add165152fa36f08e95fafe7da24f1dba4690
    --sha256: 1ia8vlqghis92cla8qmqa6kh8f3jn29b01fshyk5hmgy5373s684

source-repository-package
    type: git
    location: https://github.com/IntersectMBO/bech32.git
    tag: e341e7f83d7b73f10baa87e946818b2c493cc5f5
    --sha256: 1d891bpc1q1m1gqj02b4iv3kr4g9w7knlkq43hwbl9dn5k78aydc
    subdir: bech32

source-repository-package
    type: git
    location: https://github.com/cardano-foundation/cardano-wallet-client.git
    tag: 353412ca621dc28af53e4a19795338b19bab1b7b
    --sha256: 04q58c82wy6x9nkwqbvcxbv6s61fx08h5kf62sb511aqp08id4bb
    subdir: generated

--------------------------------------------------------------------------------
-- BEGIN Constraints tweaking section

-- cardano-addresses unit tests bring in some version constraint conflicts.
--
-- 1. hjsonschema and hjsonpointer deps have overly strict bounds.
-- 2. it has strict aeson < 1.5 dep - this will be fixed in the next release.
allow-newer:
    hjsonschema:*
  , hjsonpointer:*
  , *:aeson
  , *:hashable
  , async-timer:unliftio-core
  , ekg:*
  , ntp-client:*
  , libsystemd-journal:base
  , cardano-addresses-cli:mtl
  , servant-openapi3:*

constraints:
    base == 4.18.1.0
  , bimap >= 0.4.0
  , openapi3 >= 3.2.0
  , libsystemd-journal >= 1.4.4
  , systemd >= 2.3.0
  -- dependency of systemd-2.3.0
  , network >= 3.1.1.1
  -- choose versions that work with base >= 4.12
  , hjsonpointer >= 1.5.0
  , hjsonschema >= 1.10.0
  , Cabal >= 3.4.0.0
  , async-timer >= 0.2.0.0
  , unliftio-core >= 0.2.0.1
  , generic-arbitrary >= 0.2.2
  , iohk-monitoring >= 0.1.11

  -- lower versions of katip won't build with the Win32-2.12.0.1
  -- which is shipped with the ghc-9.2.8
  , katip >= 0.8.7.4

  -- Cardano Node dependencies:
  , cardano-api ^>= 8.36.1.1
  , cardano-crypto-class ==2.1.4.0
  , cardano-crypto-class +secp256k1-support
  , cardano-slotting ^>= 0.1.2
  , optparse-applicative-fork == 0.18.1.0
  , ouroboros-network ^>= 0.10.2.1
  , plutus-core == 1.15.0.1
  , plutus-core -with-cert -with-inline-r
  , plutus-ledger-api ==1.15.0.1

  -- TH Name shadowing warnings need to be addressed when bumping to 2.13.3.5
  , persistent ^>= 2.14.6.0

  -- warp-tls specifies incorrect upper bound on tls
  , any.warp-tls ==3.3.6
  , any.tls ==1.6.0

-- Related to: https://github.com/haskell/cabal/issues/8554
if impl(ghc == 8.10.7)
  constraints: process == 1.6.13.2

-- END Constraints tweaking section
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Flags for dependencies without an S-R-P pragma should be kept in this section
-- (conversely, flags for the S-R-P dependencies should be kept within the
-- same section where an S-R-P pragma is located,
-- for them to be managed together)

-- Using RDRAND instead of /dev/urandom as an entropy source for key
-- generation is dubious. Set the flag so we use /dev/urandom by default.
package cryptonite
  flags: -support_rdrand

package cardano-config
  flags: -systemd

package cardano-node
  flags: -systemd

--------------------------------------------------------------------------------
-- Default settings for all packages
--------------------------------------------------------------------------------

-- By default, we write IDE information for all packages.
program-options
  ghc-options: -fwrite-ide-info

program-options
  ghc-options: -Wwarn=unused-packages


--------------------------------------------------------------------------------
-- Enable specific tests in this repo

test-show-details: direct

package delta-store
  tests: True

package delta-types
  tests: True

package cardano-balance-tx
  tests: True

package cardano-coin-selection
  tests: True

package cardano-wallet
  tests: True

package cardano-wallet-api-http
  tests: True

package cardano-wallet-cli
  tests: True

package cardano-wallet-launcher
  tests: True

package cardano-wallet-primitive
  tests: True

package cardano-wallet-text-class
  tests: True

package cardano-numeric
  tests: True

package cardano-wallet-integration
  tests: True

package cardano-wallet-test-utils
  tests: True

package std-gen-seed
  tests: True

package wai-middleware-logging
  tests: True

-- Now disable all other tests with a global flag.
-- This is what they do in cardano-node/cabal.project.

tests: False

-- -------------------------------------------------------------------------
