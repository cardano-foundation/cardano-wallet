# Use small container and not VM:
sudo: false

# Choose a build environment:
dist: xenial

# Only clone the repository tip & track all branches
git:
  depth: false

notifications:
  slack:
    rooms:
      secure: VYkYJktT9Cu/aRGQccZrFdjqgFZKq65k5CIMF3i2QmMfwXVzgFojY2XyRP+VB/idopI3iAtMz81dHXUBNyX50JtftFRL4R3ic+7eqDJu30E9kerjDbFeveISVLLTTTvuG13sME6UclgKycF9Cma68Q9+MqSxCMNnu1X8LvqKofZLG2xy9UMUzJx39a9D/+oyQUtpNRopxxvG9bpyOoOp9H+lJLlDiiBpNea07l0r+9XlgfbM1UiqdxBuZMzbWoOE2QKv+JBj1PrHyS0LNwnbM6k6VNx0BWMa3C9NSnvKp7vF0aOSR9UslCjAcE/eg8xzNu/A/xNhgxF30Uc4rzH99E7f4z+G4/Qure2p+Y+jz0IBtsmLDfHWwEL2BPyaqTbMwEJz8oYKYYrb9UtjYLvn4LtbgtwAqqDgbdpMlS5pB5P/klblDsR3YsKkLwYPfZeAKXyLfMMuVpEILE7nS9ntyjw5I6tCK23PryeuJQad34C7iFQXeC42WvgYV5x+F+ZbFaY58GdVWER5X66yp4Jxgo2uo0tCdjpN8PlgQOjDSl7tgMBFcLu+TXhpYZQ1Kr/nV2f2Nb2+MDs5Eb/05yTeZzNBMzMLbKNZcAJgP3kyAAgnkUuDaVYLUcZ2q5CJkokWLWTg6fLzcoNZ1kdmtU14FwOuj0sczO42AiAqYP4EOls=
    on_pull_requests: false
    on_success: change # Send a Slack notification when the build goes from failed to success (and vice-versa)
    on_error: always # Send a Slack notification when the build is failing on master
    email: false

env:
  global:
    - WALLET_CLI_JORMUNGANDR=$HOME/.local/bin/cardano-wallet-jormungandr
    - WALLET_CLI_JORMUNGANDR_CHECKSUM=$HOME/.local/bin/cardano-wallet-jormungandr.sha256
    - WALLET_CLI_JORMUNGANDR_TARGZ=$HOME/.local/bin/cardano-wallet-jormungandr.tar.gz
    - WALLET_CLI_HTTP_BRIDGE=$HOME/.local/bin/cardano-wallet-http-bridge
    - WALLET_CLI_HTTP_BRIDGE_CHECKSUM=$HOME/.local/bin/cardano-wallet-http-bridge.sha256
    - WALLET_CLI_HTTP_BRIDGE_TARGZ=$HOME/.local/bin/cardano-wallet-http-bridge.tar.gz
    - STACK_WORK_CACHE=$HOME/.stack/stack-work.tar.gz
    - PATH=$PATH:$HOME/.local/bin
    - LOCAL_MIX_DIR=.stack-work/dist/x86_64-linux/Cabal-2.4.0.1/hpc/

# We use a hybrid setup with Rust and Haskell, so we handle the compilation ourselves
language: generic

# Deactivate builds on branches but `master` and the bors branches.
# CI is still triggered by PRs).
# We do also CI to kick in when pushing a tag `git push --tags` for releases.

# Caching so the next build will be fast too:
cache:
  timeout: 1337
  directories:
  - $HOME/.stack

before_cache:
  - rm -rf $HOME/.stack/programs/x86_64-linux/ghc-*.tar.*
  - rm -rf $HOME/.stack/indices/Hackage/00-index.tar $HOME/.stack/indices/Hackage/00-index.tar.gz
  - find $HOME/.stack/programs/x86_64-linux/ghc-*/lib/ghc-* -type f -name *_p.a -delete

before_install:
  - mkdir -p $HOME/.local/bin
  - tar xzf $STACK_WORK_CACHE || echo "no .stack-work yet"
  - travis_retry curl -L https://raw.githubusercontent.com/input-output-hk/cardano-wallet/master/lib/http-bridge/test/data/cardano-node-simple/cardano-node-simple-3.0.1.tar.gz | tar xz -C $HOME/.local/bin
  - cardano-node-simple --version
  - travis_retry curl -L https://github.com/KtorZ/cardano-http-bridge/releases/download/v0.0.5/cardano-http-bridge-v0.0.5-x86_64-linux.tar.gz | tar xz -C $HOME/.local/bin
  - cardano-http-bridge --version
  - travis_retry curl -L https://github.com/input-output-hk/jormungandr/releases/download/v0.3.2/jormungandr-v0.3.2-x86_64-unknown-linux-gnu.tar.gz | tar xz -C $HOME/.local/bin
  - jcli --version && jormungandr --version
  - travis_retry curl -L https://github.com/commercialhaskell/stack/releases/download/v1.9.3/stack-1.9.3-linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C $HOME/.local/bin '*/stack'
  - travis_retry stack --no-terminal setup

# Ensure necessary system libraries are present:
addons:
  apt:
    packages:
      - libgmp-dev
      - librocksdb-dev
      - libsystemd-dev

service:
  - docker

# Define custom set of stages
stages:
- cache ðŸ’¾
- build project ðŸ”¨
- checks ðŸ”¬
- deploy ðŸš€
- PR build project ðŸ”¨
- PR checks ðŸ”¬

jobs:
  fast_finish: true
  include:

  ################################################################################
  #
  # Push / Cron / Api
  #
  # This runs for other type of build (non PR) and are slightly heavier since they
  # also compute coverage and documentation. This is also the only way to rebuild
  # an initial default cache and re-inject 3rd-party dependencies like:
  #
  # - cardano-node-simple
  # - cardano-http-bridge
  # - jormungandr
  # - jcli
  #
  ################################################################################
  - stage: cache ðŸ’¾
    name: "Caching Dependencies"
    script:
    - stack --no-terminal build --fast --test --no-run-tests --bench --no-run-benchmarks --only-snapshot
    - stack --no-terminal build --fast --test --no-run-tests --bench --no-run-benchmarks --only-dependencies
    - tar czf $STACK_WORK_CACHE .stack-work

  - stage: build project ðŸ”¨
    name: "Compiling Project"
    script:
    # The following command also builds the `cardano-wallet-core-integration`
    # component, since it is a dependency of `cardano-wallet-http-bridge` and
    # `cardano-wallet-jormungandr`, but avoids building Haddock documentation
    # for just that component.
    - stack --no-terminal build --fast --test --no-run-tests --bench --no-run-benchmarks --haddock --no-haddock-deps --coverage --skip cardano-wallet-core-integration
    - tar czf $STACK_WORK_CACHE .stack-work lib/**/.stack-work

  - stage: checks ðŸ”¬
    name: "Code Style"
    script:
    - travis_retry curl -sSL https://raw.github.com/jaspervdj/stylish-haskell/master/scripts/latest.sh | sh -s $(find . -type f -name "*.hs" ! -path "*.stack-work*") -i
    - git diff --exit-code # Exit if Stylish-Haskell yields any diff
    - travis_retry curl -sSL https://raw.github.com/ndmitchell/hlint/master/misc/run.sh | sh -s .
    - travis_retry curl -sSL https://raw.github.com/ndmitchell/weeder/master/misc/travis.sh | sh -s .
    # Somehow, we can't install open-spec-validator using `pip` directly in the travis VM.
    # I've tried several things, including removing some existing conflicting packages, upgrading
    # pip and using some more permissive options. In the end, I gave up and went for a container.
    - cd specifications/api
    - "echo -n 'FROM python:3.7-alpine\nRUN pip install openapi-spec-validator\nENTRYPOINT [\"openapi-spec-validator\"]' > Dockerfile"
    - docker build -t openapi-spec-validator .
    - docker run -v $PWD:/files openapi-spec-validator --schema 2.0 /files/swagger.yaml
    - cd -

  - stage: checks ðŸ”¬
    name: "Tests (http-bridge)"
    script:
    - travis_retry curl -L https://github.com/KtorZ/cardano-http-bridge/releases/download/v0.0.5/hermes-testnet.tar.gz | tar xz -C $HOME

    - stack --no-terminal test --fast --haddock --no-haddock-deps --coverage cardano-wallet-http-bridge --ta "--skip MERGE_DISABLED"
    - mkdir -p .coverage/http-bridge && find . -name "*.tix" ! -path "*.coverage*" -exec cp \{} .coverage/http-bridge \;

    - tar czf $STACK_WORK_CACHE .stack-work .coverage lib/**/.stack-work lib/**/*.tix

  - stage: checks ðŸ”¬
    name: "Tests"
    script:
    - stack --no-terminal test --fast --haddock --no-haddock-deps --coverage cardano-wallet-core
    - mkdir -p .coverage/core && find . -name "*.tix" ! -path "*.coverage*" -exec cp \{} .coverage/core \;

    - stack --no-terminal test --fast --haddock --no-haddock-deps --coverage cardano-wallet-launcher
    - mkdir -p .coverage/launcher && find . -name "*.tix" ! -path "*.coverage*" -exec cp \{} .coverage/launcher \;

    - stack --no-terminal test --fast --haddock --no-haddock-deps --coverage cardano-wallet-cli
    - mkdir -p .coverage/cli && find . -name "*.tix" ! -path "*.coverage*" -exec cp \{} .coverage/cli \;

    - stack --no-terminal test --fast --haddock --no-haddock-deps --coverage text-class
    - mkdir -p .coverage/text-class && find . -name "*.tix" ! -path "*.coverage*" -exec cp \{} .coverage/text-class \;

    - stack --no-terminal test --fast --haddock --no-haddock-deps --coverage bech32
    - mkdir -p .coverage/bech32 && find . -name "*.tix" ! -path "*.coverage*" -exec cp \{} .coverage/bech32 \;

    - stack --no-terminal test --fast --haddock --no-haddock-deps --coverage cardano-wallet-jormungandr --ta "--skip MERGE_DISABLED"
    - mkdir -p .coverage/jormungandr && find . -name "*.tix" ! -path "*.coverage*" -exec cp \{} .coverage/jormungandr \;

    - tar czf $STACK_WORK_CACHE .stack-work .coverage lib/**/.stack-work lib/**/*.tix

  - stage: deploy ðŸš€
    name: "Haddock"
    script:
    - mkdir -p haddock/edge api/edge
    - cp -Rv specifications/api/* api/edge
    - mv $(stack path --local-doc-root)/* haddock/edge
    - git checkout --orphan gh-pages-deploy && git reset
    - git add api haddock && git commit -m $TRAVIS_COMMIT
    - git checkout gh-pages && git merge -X theirs --no-commit --no-ff --allow-unrelated-histories - && git commit --allow-empty --no-edit
    - git push -f -q https://WilliamKingNoel-Bot:$GITHUB_ACCESS_TOKEN@github.com/input-output-hk/cardano-wallet gh-pages &>/dev/null

  - stage: deploy ðŸš€
    name: "Coveralls"
    script:
    - export LTS=$(cat stack.yaml | grep resolver) # Extract the LTS from the stack.yaml
    - git clone https://github.com/rubik/stack-hpc-coveralls && cd stack-hpc-coveralls && git checkout 3d8352d5642ab214a7a574bd797880ae39595a44 && echo $LTS > stack.yaml
    - stack --no-terminal install && cd -
    - stack --no-terminal install hpc
    # Ignore modules that are full of Template Haskell auto-generated code
    - cd lib/core
    - find $LOCAL_MIX_DIR -type f -name "Cardano.Wallet.DB.Sqlite.TH.mix" > overlay.hpc
    - 'sed -i "s/.*hpc\/\(.*\).mix/module \"\1\" {}/" overlay.hpc'
    - stack exec -- hpc overlay --hpcdir $LOCAL_MIX_DIR overlay.hpc > Cardano.Wallet.DB.Sqlite.TH.tix
    - 'sed -i "s/0,/1,/g" Cardano.Wallet.DB.Sqlite.TH.tix'
    - cd -
    - mv lib/core/*.tix .coverage/core
    # Re-build the coverage report taking .tix from executables running outside of the test suites
    - stack hpc report .coverage/**/*.tix
    - shc combined custom

  ################################################################################
  #
  # Deployment
  #
  # Only when a tag is present, we do install and deploy the software.
  ################################################################################
  - stage: deploy ðŸš€
    if: tag =~ ^v
    name: "Executables"
    script:
    # Create optimized binaries and checksums
    - stack clean
    - stack --no-terminal build
    - stack --no-terminal install

    # Bundle cardano-wallet-jormungandr
    - cp $WALLET_CLI_JORMUNGANDR cardano-wallet
    - tar czf $WALLET_CLI_JORMUNGANDR_TARGZ cardano-wallet
    - sha256sum $WALLET_CLI_JORMUNGANDR | head -c 64 > $WALLET_CLI_JORMUNGANDR_CHECKSUM
    - ls $WALLET_CLI_JORMUNGANDR_TARGZ
    - ls $WALLET_CLI_JORMUNGANDR_CHECKSUM

    # Bundle cardano-wallet-http-bridge
    - cp $WALLET_CLI_HTTP_BRIDGE cardano-wallet
    - tar czf $WALLET_CLI_HTTP_BRIDGE_TARGZ cardano-wallet
    - sha256sum $WALLET_CLI_HTTP_BRIDGE | head -c 64 > $WALLET_CLI_HTTP_BRIDGE_CHECKSUM
    - ls $WALLET_CLI_HTTP_BRIDGE_TARGZ
    - ls $WALLET_CLI_HTTP_BRIDGE_CHECKSUM

    # Deploy documentation snapshot
    - mkdir -p haddock/$TRAVIS_TAG api/$TRAVIS_TAG
    - cp -Rv specifications/api/* api/$TRAVIS_TAG
    - mv $(stack path --local-doc-root)/* haddock/$TRAVIS_TAG
    - git checkout --orphan gh-pages-deploy && git reset
    - git add api haddock && git commit -m $TRAVIS_COMMIT
    - git checkout gh-pages && git merge -X theirs --no-commit --no-ff --allow-unrelated-histories - && git commit --allow-empty --no-edit
    - travis_retry git push -f -q https://WilliamKingNoel-Bot:$GITHUB_ACCESS_TOKEN@github.com/input-output-hk/cardano-wallet gh-pages &>/dev/null
    deploy:
      provider: releases
      api_key: $GITHUB_ACCESS_TOKEN
      draft: true # Allow editing the release before publishing it officially on GitHub
      skip_cleanup: true # Make sure that files from the previous stages aren't cleaned up
      file:
        - $WALLET_CLI_JORMUNGANDR_TARGZ
        - $WALLET_CLI_JORMUNGANDR_CHECKSUM
        - $WALLET_CLI_HTTP_BRIDGE_TARGZ
        - $WALLET_CLI_HTTP_BRIDGE_CHECKSUM
      on:
        repo: input-output-hk/cardano-wallet
        branch: master
        tags: true # Only release when a tag is pushed

  ################################################################################
  #
  # PR
  #
  # Pipeline we run on each PR. Slightly different from the pipeline we run when
  # stuff get merged into `master`. In this setup, we do want a quick feedback, and
  # we therefore parallelize as much as we can using many different jobs. We also
  # avoid options like `--coverage` or `--haddock` on each build since those take
  # needless time.
  #
  ################################################################################
  - stage: PR build project ðŸ”¨
    if: (type = pull_request OR (branch IN (bors/staging, bors/trying))) AND (commit_message =~ /Travis-CI-Disable/)
    name: "Diff Control"
    script:
    # Fails if there's any source file modified.
    - git diff $(git merge-base master HEAD) HEAD --stat --exit-code -- --path "*.hs"
    - git diff $(git merge-base master HEAD) HEAD --stat --exit-code -- --path "*.js"
    - git diff $(git merge-base master HEAD) HEAD --stat --exit-code -- --path "specifications/*"

  - stage: PR build project ðŸ”¨
    name: "Compiling Project"
    script:
    - stack clean
    - stack --no-terminal build --fast --test --no-run-tests --bench --no-run-benchmarks --haddock --no-haddock-deps
    - tar czf $STACK_WORK_CACHE .stack-work lib/**/.stack-work

  - stage: PR checks ðŸ”¬
    name: "Code Style"
    script:
    - travis_retry curl -sSL https://raw.github.com/jaspervdj/stylish-haskell/master/scripts/latest.sh | sh -s $(find . -type f -name "*.hs" ! -path "*.stack-work*") -i
    - git diff --exit-code
    - travis_retry curl -sSL https://raw.github.com/ndmitchell/hlint/master/misc/run.sh | sh -s .
    - travis_retry curl -sSL https://raw.github.com/ndmitchell/weeder/master/misc/travis.sh | sh -s .
    # Somehow, we can't install open-spec-validator using `pip` directly in the travis VM.
    # I've tried several things, including removing some existing conflicting packages, upgrading
    # pip and using some more permissive options. In the end, I gave up and went for a container.
    - cd specifications/api
    - "echo -n 'FROM python:3.7-alpine\nRUN pip install openapi-spec-validator\nENTRYPOINT [\"openapi-spec-validator\"]' > Dockerfile"
    - docker build -t openapi-spec-validator .
    - docker run -v $PWD:/files openapi-spec-validator --schema 2.0 /files/swagger.yaml
    - cd -

  - stage: PR checks ðŸ”¬
    name: "Tests: unit"
    script:
      - stack --no-terminal test --fast cardano-wallet-core cardano-wallet-launcher cardano-wallet-cli text-class bech32 cardano-wallet-http-bridge:unit cardano-wallet-jormungandr:unit

  - stage: PR checks ðŸ”¬
    name: "Tests: integration (http-bridge)"
    script:
    - travis_retry curl -L https://github.com/KtorZ/cardano-http-bridge/releases/download/v0.0.5/hermes-testnet.tar.gz | tar xz -C $HOME
    - stack --no-terminal test --fast cardano-wallet-http-bridge:integration --ta "--skip PR_DISABLED"

  - stage: PR checks ðŸ”¬
    name: "Tests: integration (jormungandr)"
    script:
      - stack --no-terminal test --fast cardano-wallet-jormungandr:integration --ta "--skip PR_DISABLED"
