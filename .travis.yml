# Use small container and not VM:
sudo: false

# Choose a build environment:
dist: xenial

# Only clone the repository tip & track all branches
git:
  depth: false

env:
  global:
    - WALLET_CLI=$HOME/.local/bin/cardano-wallet
    - WALLET_CLI_CHECKSUM=$HOME/.local/bin/cardano-wallet.sha256
    - WALLET_LAUNCHER=$HOME/.local/bin/cardano-wallet-launcher
    - WALLET_LAUNCHER_CHECKSUM=$HOME/.local/bin/cardano-wallet-launcher.sha256
    - STACK_WORK_CACHE=$HOME/.local/stack-work.tar.gz
    - PATH=$PATH:$HOME/.cargo/bin:$HOME/.local/bin


# Use the Travis Rust build tools for cardano-http-bridge.
language: rust

# Deactivate builds on branches but `master` (CI is still triggered by PRs).
# We do also CI to kick in when pushing a tag `git push --tags` for releases.
if: (branch = master) OR (tag =~ ^v)

# Caching so the next build will be fast too:
cache:
  timeout: 1337
  directories:
  - $HOME/.stack
  - $HOME/.local
  - $HOME/.ghc
  - $HOME/.cargo

before_cache:
  - rm -rf $HOME/.cargo/registry # Don't cache cargo's registry

# Ensure necessary system libraries are present:
addons:
  apt:
    packages:
      - libgmp-dev
      - librocksdb-dev

# Define custom set of stages
stages:
- build ðŸ”¨
- checks ðŸ”¬
- deploy ðŸš€

jobs:
  fast_finish: true
  include:
  - stage: build ðŸ”¨
    name: "Stylish-Haskell"
    env: NO_CACHE=True
    script:
    - curl -sSL https://raw.github.com/jaspervdj/stylish-haskell/master/scripts/latest.sh | sh -s $(find . -type f -name "*.hs" ! -path "*.stack-work*") -i
    - git diff --exit-code # Exit if Stylish-Haskell yields any diff

  - stage: build ðŸ”¨
    name: "Compiling"
    script:
    - mkdir -p ~/.local/bin
    - travis_retry curl -L -o cardano-node-simple.tar.gz https://raw.githubusercontent.com/input-output-hk/cardano-wallet/master/test/data/cardano-node-simple/cardano-node-simple-3.0.1.tar.gz
    - tar xzf cardano-node-simple.tar.gz -C $HOME/.local/bin
    - cardano-node-simple --version
    - test "$(cardano-http-bridge --version)" = "cardano-http-bridge 0.0.1" || travis_retry cargo install --force --branch cardano-wallet-integration --git https://github.com/KtorZ/cardano-http-bridge.git
    - cardano-http-bridge --version
    - travis_retry curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
    - stack --no-terminal setup
    - stack --no-terminal build --only-snapshot
    - stack --no-terminal build --only-dependencies
    - stack --no-terminal build --test --no-run-tests --coverage --haddock --no-haddock-deps
    - tar czf $STACK_WORK_CACHE .stack-work

  - stage: checks ðŸ”¬
    name: "HLint"
    script:
    - tar xzf $STACK_WORK_CACHE
    - curl -sSL https://raw.github.com/ndmitchell/hlint/master/misc/run.sh | sh -s .

  - stage: checks ðŸ”¬
    name: "Weeder"
    script:
    - tar xzf $STACK_WORK_CACHE
    - curl -sSL https://raw.github.com/ndmitchell/weeder/master/misc/travis.sh | sh -s .

  - stage: checks ðŸ”¬
    name: "Tests"
    script:
    - tar xzf $STACK_WORK_CACHE
    - travis_retry curl -L -o hermes-testnet.tar.gz https://raw.githubusercontent.com/input-output-hk/cardano-wallet/master/test/data/cardano-http-bridge/hermes-testnet.tar.gz
    - tar xzf hermes-testnet.tar.gz -C $HOME
    - stack --no-terminal test --coverage
    - tar czf $STACK_WORK_CACHE .stack-work

  - stage: deploy ðŸš€
    if: type = push AND branch = master
    name: "Haddock"
    script:
    - tar xzf $STACK_WORK_CACHE
    - cp -Rv specifications/api api
    - mkdir -p haddock && mv $(stack path --local-doc-root)/* haddock
    - git checkout --orphan gh-pages-deploy && git reset
    - git add api haddock && git commit -m $TRAVIS_COMMIT
    - git checkout gh-pages && git merge -X theirs --no-commit --no-ff --allow-unrelated-histories - && git commit --allow-empty --no-edit
    - git push -f -q https://WilliamKingNoel-Bot:$GITHUB_ACCESS_TOKEN@github.com/input-output-hk/cardano-wallet gh-pages &>/dev/null

  - stage: deploy ðŸš€
    if: type = push AND branch = master
    name: "Coveralls"
    script:
    - tar xzf $STACK_WORK_CACHE
    - export LTS=$(cat stack.yaml | grep resolver) # Extract the LTS from the stack.yaml
    - git clone https://github.com/rubik/stack-hpc-coveralls && cd stack-hpc-coveralls && git checkout 3d8352d5642ab214a7a574bd797880ae39595a44 && echo $LTS > stack.yaml
    - stack --no-terminal install
    - cd - && shc cardano-wallet unit integration

  - stage: deploy ðŸš€
    if: tag =~ ^v
    name: "Executables"
    script:
    - tar xzf $STACK_WORK_CACHE
    - stack --no-terminal install
    - sha256sum $WALLET_CLI | head -c 64 > $WALLET_CLI_CHECKSUM
    - ls $WALLET_CLI
    - ls $WALLET_CLI_CHECKSUM
    - sha256sum $WALLET_LAUNCHER | head -c 64 > $WALLET_LAUNCHER_CHECKSUM
    - ls $WALLET_LAUNCHER
    - ls $WALLET_LAUNCHER_CHECKSUM
    deploy:
      provider: releases
      api_key: $GITHUB_ACCESS_TOKEN
      draft: true # Allow editing the release before publishing it officially on GitHub
      skip_cleanup: true # Make sure that files from the previous stages aren't cleaned up
      file:
        - $WALLET_CLI
        - $WALLET_CLI_CHECKSUM
        - $WALLET_LAUNCHER
        - $WALLET_LAUNCHER_CHECKSUM
      on:
        repo: input-output-hk/cardano-wallet
        branch: master
        tags: true # Only release when a tag is pushed
