require "rspec/core/rake_task"
require "cardano_wallet"
require_relative "env"
require_relative "helpers/utils"

include Helpers::Utils

RSpec::Core::RakeTask.new(:spec)

STATE = absolute_path ENV['TESTS_E2E_STATEDIR']
CONFIGS = absolute_path ENV['CARDANO_NODE_CONFIGS']
LOGS = absolute_path ENV['TESTS_LOGDIR']
NODE_DB = absolute_path ENV['TESTS_NODE_DB']
WALLET_DB = absolute_path ENV['TESTS_WALLET_DB']

BINS = absolute_path ENV['TESTS_E2E_BINDIR']

FIXTURES_FILE = absolute_path ENV['TESTS_E2E_FIXTURES_FILE']
BLOCKFROST_FILE = absolute_path ENV['TESTS_E2E_BLOCKFROST_FILE']
FIXTURES_SECRET = absolute_path ENV['TESTS_E2E_FIXTURES']

TOKEN_METADATA = ENV['TESTS_E2E_TOKEN_METADATA']
WALLET_PORT = ENV['WALLET_PORT']

path_separator = is_win? ? ';' : ':'
ENV['PATH'] = "#{BINS}#{path_separator}#{ENV['PATH']}"

task :default => :spec

task :secrets_encode do
  desc "Encode secrets using $TESTS_E2E_FIXTURES phrase"

  puts "\n  >> Encoding #{FIXTURES_FILE}..."
  puts `gpg --pinentry-mode loopback --passphrase=#{FIXTURES_SECRET} --symmetric --output=#{FIXTURES_FILE}.gpg #{FIXTURES_FILE}`

  puts "\n  >> Encoding #{BLOCKFROST_FILE}..."
  puts `gpg --pinentry-mode loopback --passphrase=#{FIXTURES_SECRET} --symmetric --output=#{BLOCKFROST_FILE}.gpg #{BLOCKFROST_FILE}`

end

task :secrets_decode do
  desc "Decode secrets using $TESTS_E2E_FIXTURES phrase"

  if File.exists?(FIXTURES_FILE)
    puts "\n  >> Skipping decoding #{FIXTURES_FILE}.gpg... #{FIXTURES_FILE} already exists!"
  else
    puts "\n  >> Decoding #{FIXTURES_FILE}.gpg..."
    puts `gpg --pinentry-mode loopback --yes --passphrase=#{FIXTURES_SECRET} --output #{FIXTURES_FILE} --decrypt #{FIXTURES_FILE}.gpg`
  end

  if File.exists?(BLOCKFROST_FILE)
    puts "\n  >> Skipping decoding #{BLOCKFROST_FILE}.gpg... #{BLOCKFROST_FILE} already exists!"
  else
    puts "\n  >> Decoding #{BLOCKFROST_FILE}.gpg..."
    puts `gpg --pinentry-mode loopback --yes --passphrase=#{FIXTURES_SECRET} --output #{BLOCKFROST_FILE} --decrypt #{BLOCKFROST_FILE}.gpg`
  end
end

task :fixture_wallets_template do
  puts "\n  >> Creating #{FIXTURES_FILE}"

  fixture_wallets = { :linux => {
                          :fixture => { :shelley => mnemonic_sentence(24),
                                         :icarus => mnemonic_sentence(15),
                                         :random => mnemonic_sentence(12)
                                       },
                          :target =>  { :shelley => mnemonic_sentence(24),
                                         :shared => mnemonic_sentence(24)
                                       }
                                },
                      :macos => {
                          :fixture => { :shelley => mnemonic_sentence(24),
                                         :icarus => mnemonic_sentence(15),
                                         :random => mnemonic_sentence(12)
                                       },
                          :target =>  { :shelley => mnemonic_sentence(24),
                                         :shared => mnemonic_sentence(24)
                                       }
                                },
                      :windows => {
                          :fixture => { :shelley => mnemonic_sentence(24),
                                         :icarus => mnemonic_sentence(15),
                                         :random => mnemonic_sentence(12)
                                       },
                          :target =>  { :shelley => mnemonic_sentence(24),
                                         :shared => mnemonic_sentence(24)
                                       }
                                },
                       :currency_contract_wallet => mnemonic_sentence(24)
                    }
  if File.exists?(FIXTURES_FILE)
    err = "
              File #{FIXTURES_FILE} already exists!
              I don't want to overwrite it in case it
              contains fixture wallets already...
            "
    STDERR.puts err
  else
    File.open(FIXTURES_FILE, 'w') { |f| f.write JSON.pretty_generate(fixture_wallets) }
  end

end

task :clean_logs, [:env] do |task, args|
  puts "\n  >> Removing logs"
  log_dir = File.join(LOGS, args[:env])
  rm_files(log_dir)
end

task :clean_bins do
  puts "\n  >> Removing old bins"
  rm_files(BINS)
end

task :wait_until_node_synced do
  puts "\n  >> Waiting for node to be synced"

  network = CardanoWallet.new.misc.network
  # allow 180 mins for connecting to the node in case it needs to replay ledger
  timeout = 10800
  current_time = Time.now
  timeout_treshold = current_time + timeout
  puts "Timeout: #{timeout}s"
  puts "Current time: #{current_time}"
  puts "Threshold: #{timeout_treshold}"
  puts "[#{Time.now}] Waiting for node to start..."
  begin
    current_time = Time.now
    while network.information["sync_progress"]["status"] == "syncing" do
      puts "[#{Time.now}] Syncing node... #{network.information["sync_progress"]["progress"]["quantity"]}%"
      sleep 15
    end
  rescue
    retry if (current_time <= timeout_treshold)
    raise("[#{Time.now}] Could not connect to wallet within #{timeout} seconds...")
  end

  puts "\n>> Cardano-node and cardano-wallet are synced! <<"
end

##
# `rake start_node_and_wallet[testnet]' assumes cardano-node and cardano-wallet in $TESTS_E2E_BINDIR
task :start_node_and_wallet, [:env] do |task, args|
  puts "\n  >> Setting up cardano-node and cardano-wallet"

  bin_dir = BINS == '' ? BINS : "#{BINS}/"
  config_dir = File.join(CONFIGS, args[:env])
  log_dir = File.join(LOGS, args[:env])
  wallet_db_dir = File.join(WALLET_DB, args[:env])
  node_db_dir = File.join(NODE_DB, args[:env])
  cd = Dir.pwd
  mk_dir(STATE)
  mk_dir(log_dir)

  if is_win?
    # create cardano-node.bat file
    node_cmd = "#{bin_dir}cardano-node.exe run --config #{config_dir}/configuration.json --topology #{config_dir}/topology.json --database-path #{node_db_dir} --socket-path \\\\.\\pipe\\cardano-node-testnet"
    File.open("cardano-node.bat", "w") do |f|
      f.write(node_cmd)
    end

    # create cardano-wallet.bat file
    wallet_cmd = "#{bin_dir}cardano-wallet.exe serve --port #{WALLET_PORT} --node-socket \\\\.\\pipe\\cardano-node-testnet --testnet #{config_dir}/genesis-byron.json --database #{wallet_db_dir} --token-metadata-server #{TOKEN_METADATA}"
    File.open("cardano-wallet.bat", "w") do |f|
      f.write(wallet_cmd)
    end

    install_node = "nssm install cardano-node #{cd}/cardano-node.bat"
    install_wallet = "nssm install cardano-wallet #{cd}/cardano-wallet.bat"
    log_stdout_node = "nssm set cardano-node AppStdout #{log_dir}/node.log"
    log_stderr_node = "nssm set cardano-node AppStderr #{log_dir}/node.log"
    log_stdout_wallet = "nssm set cardano-wallet AppStdout #{log_dir}/wallet.log"
    log_stderr_wallet = "nssm set cardano-wallet AppStderr #{log_dir}/wallet.log"
    start_node = "nssm start cardano-node"
    start_wallet = "nssm start cardano-wallet"

    cmd install_node
    cmd install_wallet
    cmd log_stdout_node
    cmd log_stderr_node
    cmd log_stdout_wallet
    cmd log_stderr_wallet
    cmd start_node
    cmd start_wallet
  else
    start_node = "#{bin_dir}cardano-node run --config #{config_dir}/configuration.json --topology #{config_dir}/topology.json --database-path #{node_db_dir} --socket-path #{node_db_dir}/node.socket"
    start_wallet = "#{bin_dir}cardano-wallet serve --port #{WALLET_PORT} --node-socket #{node_db_dir}/node.socket --testnet #{config_dir}/genesis-byron.json --database #{wallet_db_dir} --token-metadata-server #{TOKEN_METADATA}"

    cmd "screen -dmS NODE_#{args[:env]} -L -Logfile #{log_dir}/node.log #{start_node}"
    cmd "screen -dmS WALLET_#{args[:env]} -L -Logfile #{log_dir}/wallet.log #{start_wallet}"
    cmd "screen -ls", true
  end
end

task :stop_node_and_wallet, [:env] do |task, args|
  puts "\n  >> Stopping cardano-node and cardano-wallet"

  if is_win?
    cmd "nssm stop cardano-wallet"
    cmd "nssm stop cardano-node"

    cmd "nssm remove cardano-wallet confirm"
    cmd "nssm remove cardano-node confirm"
  else
    cmd "screen -XS WALLET_#{args[:env]} quit"
    cmd "screen -XS NODE_#{args[:env]} quit"
  end

end

task :start_wallet_light, [:env] do |task, args|
  puts "\n  >> Setting up cardano-wallet-light"

  bin_dir = BINS == '' ? BINS : "#{BINS}/"
  config_dir = File.join(CONFIGS, args[:env])
  log_dir = File.join(LOGS, args[:env])
  wallet_db_dir = File.join(WALLET_DB, args[:env])
  cd = Dir.pwd
  mk_dir(STATE)
  mk_dir(log_dir)

  if is_win?
    # create cardano-wallet.bat file
    wallet_cmd = "#{bin_dir}cardano-wallet.exe serve --port #{WALLET_PORT} --light --blockfrost-token-file #{BLOCKFROST_FILE} --testnet #{config_dir}/genesis-byron.json --database #{wallet_db_dir} --token-metadata-server #{TOKEN_METADATA}"
    File.open("cardano-wallet.bat", "w") do |f|
      f.write(wallet_cmd)
    end

    install_wallet = "nssm install cardano-wallet-light #{cd}/cardano-wallet.bat"
    log_stdout_wallet = "nssm set cardano-wallet-light AppStdout #{log_dir}/wallet.log"
    log_stderr_wallet = "nssm set cardano-wallet-light AppStderr #{log_dir}/wallet.log"
    start_wallet = "nssm start cardano-wallet-light"

    cmd install_wallet
    cmd log_stdout_wallet
    cmd log_stderr_wallet
    cmd start_wallet
  else
    start_wallet = "#{bin_dir}cardano-wallet serve --port #{WALLET_PORT} --light --blockfrost-token-file #{BLOCKFROST_FILE} --testnet #{config_dir}/genesis-byron.json --database #{wallet_db_dir} --token-metadata-server #{TOKEN_METADATA}"

    cmd "screen -dmS WALLET_#{args[:env]}_light -L -Logfile #{log_dir}/wallet.log #{start_wallet}"
    cmd "screen -ls", true
  end
end

task :stop_wallet_light, [:env] do |task, args|
  puts "\n  >> Stopping cardano-wallet-light"

  if is_win?
    cmd "nssm stop cardano-wallet-light"
    cmd "nssm remove cardano-wallet-light confirm"
  else
    cmd "screen -XS WALLET_#{args[:env]}_light quit"
  end

end

task :display_versions do
  puts "\n  >> cardano-node and cardano-wallet versions:"

  bin_dir = BINS == '' ? BINS : "#{BINS}/"
  if is_win?
    cmd "#{bin_dir}cardano-wallet.exe version", true
    cmd "#{bin_dir}cardano-node.exe version", true
  else
    cmd "#{bin_dir}cardano-wallet version", true
    cmd "#{bin_dir}cardano-node version", true
  end
end

task :get_latest_bins, [:pr] do |task, args|
  puts "\n  >> Getting latest node and wallet binaries from Hydra into #{BINS}"

  pr = args[:pr] || 'master'
  if (pr.empty? || pr == 'master')
    puts "From master branch 👇"
    pr_num = nil
  else
    puts "From PR: ##{pr} 👇"
    pr_num = pr.to_i
  end
  wget(get_latest_binary_url(pr_num))

  mk_dir(BINS)
  if is_win?
    cmd "unzip -o binary-dist -d #{BINS}"
    cmd "#{BINS}/cardano-node.exe version"
    cmd "#{BINS}/cardano-wallet.exe version"
  else
    Rake::Task[:clean_bins].invoke
    cmd "rm -rf cardano-wallet-*/"
    cmd "tar -xvf binary-dist"
    cmd "cp -r cardano-wallet-*/* #{BINS}"

    cmd "#{BINS}/cardano-node version"
    cmd "#{BINS}/cardano-wallet version"
  end
end

task :get_latest_node_db, [:env] do |task, args|
  puts "\n  >> Getting latest node db"
  env = args[:env]
  file = "db-#{env}.tar.gz"
  node_db_dir = File.join(NODE_DB, env)
  mk_dir(node_db_dir)
  wget(get_latest_node_db_url(env))

  cmd "tar -xvf #{file}"

end

task :get_latest_configs, [:env] do |task, args|
  env = args[:env]
  out = File.join(CONFIGS, env)

  if (File.exist?(out) && (not File.writable?(out)))
    # The config directory is probably a /nix/store path
    puts "\n  >> Using config directory '#{out}'"
  else
    puts "\n  >> Getting latest configs for '#{env}' into #{CONFIGS}"

    base_url = get_latest_configs_base_url
    mk_dir(STATE)
    mk_dir(CONFIGS)
    mk_dir(out)
    config_file = File.join(out, "configuration.json")
    wget("#{base_url}/#{env}-config.json", config_file)
    wget("#{base_url}/#{env}-byron-genesis.json", "#{out}/genesis-byron.json")
    wget("#{base_url}/#{env}-shelley-genesis.json", "#{out}/genesis-shelley.json")
    wget("#{base_url}/#{env}-alonzo-genesis.json", "#{out}/genesis-alonzo.json")
    wget("#{base_url}/#{env}-topology.json", "#{out}/topology.json")
    # remove environment names from genesis files
    config = File.read(config_file)
    config_edited = config.gsub(/#{env}-([^-]+)-genesis.json/, 'genesis-\1.json')
    File.open(config_file, "w") { |file| file.puts config_edited }
  end
end

task :get_docker_logs do
  puts "\n  >> Getting docker logs into #{LOGS}"

  mk_dir(LOGS)
  node_logfile = `docker inspect --format='{{.LogPath}}' cardano-node`.gsub("\n", '')
  wallet_logfile = `docker inspect --format='{{.LogPath}}' cardano-wallet`.gsub("\n", '')

  cmd "sudo cp #{node_logfile} #{LOGS}/node.log"
  cmd "sudo cp #{wallet_logfile} #{LOGS}/wallet.log"

  # Add permissions so logs can be uploaded from workflow
  cmd "sudo chmod a+rw #{LOGS}/node.log"
  cmd "sudo chmod a+rw #{LOGS}/wallet.log"
end

##
# Setup utility task getting node and wallet binaries, configs and decoding fixtures
# so it is ready to start
task :setup, [:env, :pr, :skip_configs] do |task, args|
  puts "\n  >> Getting latest binaries and configs and decoding fixtures..."
  env = args[:env]
  pr = args[:pr] || nil
  skip_configs = args[:skip_configs] || nil

  if BINS == ''
    puts "\n  >> Skipping getting latest binaries. Will test wallet and node from $PATH."
  else
    Rake::Task[:get_latest_bins].invoke(pr)
  end
  Rake::Task[:get_latest_configs].invoke(env) unless skip_configs
  Rake::Task[:secrets_decode].invoke
end

task :run_on, [:env, :sync_strategy, :skip_configs, :pr] do |task, args|
  puts "\n>> Setting up env and running tests..."
  puts "TESTS_E2E_STATEDIR=#{STATE}"
  env = args[:env]
  skip_configs = args[:skip_configs]
  sync_strategy = args[:sync_strategy] || :sync
  pr = args[:pr] || nil

  Rake::Task[:setup].invoke(env, pr, skip_configs)
  Rake::Task[:display_versions].invoke
  Rake::Task[:start_node_and_wallet].invoke(env)

  if sync_strategy == "no-sync"
    puts "\n  >> Skipping waiting for node to be synced..."
  else
    Rake::Task[:wait_until_node_synced].invoke
  end

  Rake::Task[:spec].invoke
  Rake::Task[:stop_node_and_wallet].invoke(env)
end

##
# print datetime in format that's consistent across different OS
# $ rake datetime
# 20211122-94332
task :datetime do
  puts Time.now.strftime('%Y%m%d-%H%M%S')
end
