# frozen_string_literal: true

require 'rspec/core/rake_task'
require 'cardano_wallet'
require_relative 'env'
require_relative 'helpers/utils'
require_relative 'helpers/buildkite'
require 'io/console'

include Helpers::Utils

$stdout.sync = true

STATE = absolute_path ENV.fetch('TESTS_E2E_STATEDIR', nil)
CONFIGS = absolute_path ENV.fetch('CARDANO_NODE_CONFIGS', nil)
LOGS = absolute_path ENV.fetch('TESTS_LOGDIR', nil)
NODE_DB = absolute_path ENV.fetch('TESTS_NODE_DB', nil)
WALLET_DB = absolute_path ENV.fetch('TESTS_WALLET_DB', nil)
NODE_SOCKET_PATH = ENV.fetch('CARDANO_NODE_SOCKET_PATH', nil)

BINS = absolute_path ENV.fetch('TESTS_E2E_BINDIR', nil)

FIXTURES_FILE = absolute_path ENV.fetch('TESTS_E2E_FIXTURES_FILE', nil)
FIXTURES_SECRET = ENV.fetch('TESTS_E2E_FIXTURES', nil)

TOKEN_METADATA = ENV.fetch('TESTS_E2E_TOKEN_METADATA', nil)
WALLET_PORT = ENV.fetch('WALLET_PORT', nil)

path_separator = win? ? ';' : ':'
ENV['PATH'] = "#{BINS}#{path_separator}#{ENV.fetch('PATH', nil)}"

RSpec::Core::RakeTask.new(:spec)
task default: :spec

task :secrets_encode do
  desc 'Encode secrets using $TESTS_E2E_FIXTURES phrase'

  log ">> Encoding #{FIXTURES_FILE}..."
  log `gpg --pinentry-mode loopback --passphrase=#{FIXTURES_SECRET} --symmetric --output=#{FIXTURES_FILE}.gpg #{FIXTURES_FILE}`
end

task :secrets_decode do
  desc 'Decode secrets using $TESTS_E2E_FIXTURES phrase'

  if File.exist?(FIXTURES_FILE)
    log ">> Skipping decoding #{FIXTURES_FILE}.gpg... #{FIXTURES_FILE} already exists!"
  else
    log ">> Decoding #{FIXTURES_FILE}.gpg..."
    log `gpg --pinentry-mode loopback --yes --passphrase=#{FIXTURES_SECRET} --output #{FIXTURES_FILE} --decrypt #{FIXTURES_FILE}.gpg`
  end
end

task :fixture_wallets_template do
  log ">> Creating #{FIXTURES_FILE}"
  utils = CardanoWallet.new.utils
  fixture_wallets = { linux: {
                        fixture: { shelley: { mnemonics: utils.mnemonic_sentence(24) },
                                   icarus: { mnemonics: utils.mnemonic_sentence(24) },
                                   random: { mnemonics: utils.mnemonic_sentence(24) },
                                   shared: { mnemonics: utils.mnemonic_sentence(24) },
                                   shared2: { mnemonics: utils.mnemonic_sentence(24) } },
                        target: { shelley: { mnemonics: utils.mnemonic_sentence(24) } }
                      },
                      macos: {
                        fixture: { shelley: { mnemonics: utils.mnemonic_sentence(24) },
                                   icarus: { mnemonics: utils.mnemonic_sentence(24) },
                                   random: { mnemonics: utils.mnemonic_sentence(24) },
                                   shared: { mnemonics: utils.mnemonic_sentence(24) },
                                   shared2: { mnemonics: utils.mnemonic_sentence(24) } },
                        target: { shelley: { mnemonics: utils.mnemonic_sentence(24) } }
                      },
                      windows: {
                        fixture: { shelley: { mnemonics: utils.mnemonic_sentence(24) },
                                   icarus: { mnemonics: utils.mnemonic_sentence(24) },
                                   random: { mnemonics: utils.mnemonic_sentence(24) },
                                   shared: { mnemonics: utils.mnemonic_sentence(24) },
                                   shared2: { mnemonics: utils.mnemonic_sentence(24) } },
                        target: { shelley: { mnemonics: utils.mnemonic_sentence(24) } }
                      },
                      currency_contract_wallet: { mnemonics: utils.mnemonic_sentence(24) } }
  if File.exist?(FIXTURES_FILE)
    err = "
              File #{FIXTURES_FILE} already exists!
              I don't want to overwrite it in case it
              contains fixture wallets already...
            "
    warn err
  else
    File.write(FIXTURES_FILE, JSON.pretty_generate(fixture_wallets))
  end
end

task :clean_logs, [:env] do |_task, args|
  log '>> Removing logs'
  log_dir = File.join(LOGS, args[:env])
  rm_files(log_dir)
end

task :clean_node_db, [:env] do |_task, args|
  log '>> Removing node_db'
  rm_files(File.join(NODE_DB, args[:env]))
  rm_files(File.join(NODE_DB, "db-#{args[:env]}.tar.gz"))
end

task :clean_wallet_db, [:env] do |_task, args|
  log '>> Removing wallet_db'
  rm_files(File.join(WALLET_DB, args[:env]))
end

task :clean_bins do
  log '>> Removing old bins'
  rm_files(BINS)
end

task :wait_until_node_synced do
  log '>> Waiting for node to be synced'

  network = CardanoWallet.new.misc.network
  # allow 180 mins for connecting to the node in case it needs to replay ledger
  timeout = 300
  current_time = Time.now
  timeout_treshold = current_time + timeout
  log "Timeout: #{timeout}s"
  log "Current time: #{current_time}"
  log "Threshold: #{timeout_treshold}"
  log 'Waiting for node to start...'
  begin
    current_time = Time.now
    while network.information['sync_progress']['status'] == 'syncing'
      log "Syncing node... #{network.information['sync_progress']['progress']['quantity']}%"

      sleep 5
    end
  rescue StandardError => e
    if current_time <= timeout_treshold
      log "Retrying after error #{e}"
      sleep 5
      retry
    end
    raise("[#{Time.now}] Could not connect to wallet within #{timeout} seconds, last error: #{e}")
  end

  log '>> Cardano-node and cardano-wallet are synced! <<'
end

##
# `rake start_node_and_wallet[testnet]' assumes cardano-node and cardano-wallet in $TESTS_E2E_BINDIR
task :start_node_and_wallet, [:env] do |_task, args|
  log '>> Setting up cardano-node and cardano-wallet'

  bin_dir = BINS == '' ? BINS : "#{BINS}/"
  config_dir = File.join(CONFIGS, args[:env])
  log ">> Using config directory '#{config_dir}'"
  log_dir = File.join(LOGS, args[:env])
  log ">> Using log directory '#{log_dir}'"
  wallet_db_dir = File.join(WALLET_DB, args[:env])
  log ">> Using wallet_db directory '#{wallet_db_dir}'"
  node_db_dir = File.join(NODE_DB, args[:env])
  log ">> Using node_db directory '#{node_db_dir}'"
  cd = Dir.pwd
  mk_dir(STATE)
  mk_dir(log_dir)
  network = args[:env] == 'mainnet' ? '--mainnet' : "--testnet #{config_dir}/byron-genesis.json"

  if win?
    # create cardano-node.bat file
    node_cmd = "#{bin_dir}cardano-node.exe run --config #{config_dir}/config.json --topology #{config_dir}/topology.json --database-path #{node_db_dir} --socket-path \\\\.\\pipe\\cardano-node-testnet"
    File.write('cardano-node.bat', node_cmd)

    # create cardano-wallet.bat file
    wallet_cmd = "#{bin_dir}cardano-wallet.exe serve --port #{WALLET_PORT} --node-socket \\\\.\\pipe\\cardano-node-testnet #{network} --database #{wallet_db_dir} --token-metadata-server #{TOKEN_METADATA}"
    File.write('cardano-wallet.bat', wallet_cmd)

    install_node = "nssm install cardano-node #{cd}/cardano-node.bat"
    install_wallet = "nssm install cardano-wallet #{cd}/cardano-wallet.bat"
    log_stdout_node = "nssm set cardano-node AppStdout #{log_dir}/node.log"
    log_stderr_node = "nssm set cardano-node AppStderr #{log_dir}/node.log"
    log_stdout_wallet = "nssm set cardano-wallet AppStdout #{log_dir}/wallet.log"
    log_stderr_wallet = "nssm set cardano-wallet AppStderr #{log_dir}/wallet.log"
    start_node = 'nssm start cardano-node'
    start_wallet = 'nssm start cardano-wallet'

    cmd install_node
    cmd install_wallet
    cmd log_stdout_node
    cmd log_stderr_node
    cmd log_stdout_wallet
    cmd log_stderr_wallet
    cmd start_node
    cmd start_wallet
  else
    start_node = <<~CMD
      #{bin_dir}cardano-node run \
        --config #{config_dir}/config.json \
        --topology #{config_dir}/topology.json \
        --database-path #{node_db_dir} \
        --socket-path #{NODE_SOCKET_PATH}
    CMD
    log ">> Starting cardano-node with command: #{start_node}"
    start_wallet = <<~CMD
      #{bin_dir}cardano-wallet serve #{network} \
        --port #{WALLET_PORT} \
        --node-socket #{NODE_SOCKET_PATH} \
        --database #{wallet_db_dir} \
        --token-metadata-server #{TOKEN_METADATA}
    CMD
    log ">> Starting cardano-wallet with command: #{start_wallet}"
    cmd <<~CMD
      screen -dmS NODE_#{args[:env]} -L \
        -Logfile #{log_dir}/node.log \
        #{start_node}
    CMD
    cmd <<~CMD
      screen -dmS WALLET_#{args[:env]} -L \
        -Logfile #{log_dir}/wallet.log \
        #{start_wallet}
    CMD
    cmd 'screen -ls', display_result: true
  end
end

task :stop_node_and_wallet, [:env] do |_task, args|
  log '>> Stopping cardano-node and cardano-wallet'

  if win?
    cmd 'nssm stop cardano-wallet'
    cmd 'nssm stop cardano-node'

    cmd 'nssm remove cardano-wallet confirm'
    cmd 'nssm remove cardano-node confirm'
  else
    cmd "screen -S WALLET_#{args[:env]} -X at '0' stuff '^C'"
    cmd "screen -XS WALLET_#{args[:env]} quit"
    cmd "screen -S NODE_#{args[:env]} -X at '0' stuff '^C'"
    cmd "screen -XS NODE_#{args[:env]} quit"
  end
end

task :display_versions, [:bin_dir] do |_task, args|
  puts "\n  >> cardano-node and cardano-wallet versions:"
  bin_dir = args[:bin_dir] || BINS

  if win?
    cmd "#{bin_dir}/cardano-wallet.exe version", display_result: true
    cmd "#{bin_dir}/cardano-node.exe version", display_result: true
  else
    cmd "#{bin_dir}/cardano-wallet version", display_result: true
    cmd "#{bin_dir}/cardano-node version", display_result: true
  end
end

task :get_latest_windows_tests, [:branch, :destination, :status, :build] do |_task, args|
  destination = args[:destination] || 'cardano-wallet-tests-win64'
  job_key = 'windows-testing-bundle'
  bk = Buildkite.new
  status = args[:status]
  branch = args[:branch] || 'master'
  build = args[:build] || 'latest'
  options = status == 'any' ? { branch: branch } : { branch: branch, state: status }
  last_build =
    build == 'latest' ? bk.last_build_number(options) : build
  log "Latest passing buildkite '#{bk.pipeline}' pipeline for branch '#{branch}' is #{last_build}"
  jobs = bk.jobs(last_build)
  mk_dir(destination)
  log "Getting '#{job_key}' artifact 👇"
  bk.get_artifacts(last_build, jobs[job_key], destination, 'cardano-wallet-tests-win64.zip', unzip: true)
end

task :get_bins, [:nb] do |_task, args|
  log ">> Getting node and wallet binaries from Buildkite into #{BINS}"
  last_build = args[:nb] || 1
  bk = Buildkite.new
  log "Latest passing buildkite '#{bk.pipeline}' pipeline build is #{last_build}"
  jobs = bk.jobs(last_build)
  mk_dir(BINS)

  if linux?
    job_key = 'linux-package'
    log "Getting '#{job_key}' artifact 👇"
    bk.get_artifacts(last_build, jobs[job_key], BINS)
  elsif win?
    job_key = 'windows-package'
    log "Getting '#{job_key}' artifact 👇"
    bk.get_artifacts(last_build, jobs[job_key], BINS)
  elsif mac?
    job_key = 'macos-package'
    log "Getting '#{job_key}' artifact 👇"
    bk.get_artifacts(last_build, jobs[job_key], BINS)
  end
end

task :get_latest_bins, [:branch, :state] do |_task, args|
  log ">> Getting latest node and wallet binaries from Buildkite into #{BINS}"
  branch = args[:branch] || 'master'
  state = args[:state] || 'any'
  filter = state == 'any' ? { branch: branch } : { branch: branch, state: state }
  bk = Buildkite.new
  last_build = bk.last_build_number(filter)
  log "Latest #{filter} buildkite '#{bk.pipeline}' pipeline build is #{last_build}"
  jobs = bk.jobs(last_build)
  mk_dir(BINS)

  if linux?
    job_key = 'linux-package'
    log "Getting '#{job_key}' artifact 👇"
    bk.get_artifacts(last_build, jobs[job_key], BINS)
  elsif win?
    job_key = 'windows-package'
    log "Getting '#{job_key}' artifact 👇"
    bk.get_artifacts(last_build, jobs[job_key], BINS)
  elsif mac?
    job_key = 'macos-intel-package'
    log "Getting '#{job_key}' artifact 👇"
    bk.get_artifacts(last_build, jobs[job_key], BINS)
  end
end

task :get_latest_configs, [:env] do |_task, args|
  env = args[:env]
  out = File.join(CONFIGS, env)

  if File.exist?(out)
    # The config directory is probably a /nix/store path
    log ">> Using config directory '#{out}'"
  else
    log ">> Getting latest configs for '#{env}' into #{CONFIGS}"

    base_url = get_latest_configs_base_url(env)
    mk_dir(STATE)
    mk_dir(CONFIGS)
    mk_dir(out)
    config_file = File.join(out, 'config.json')
    wget("#{base_url}config.json", config_file)
    wget("#{base_url}byron-genesis.json", "#{out}/byron-genesis.json")
    wget("#{base_url}shelley-genesis.json", "#{out}/shelley-genesis.json")
    wget("#{base_url}alonzo-genesis.json", "#{out}/alonzo-genesis.json")
    wget("#{base_url}conway-genesis.json", "#{out}/conway-genesis.json")
    wget("#{base_url}topology.json", "#{out}/topology.json")

    config_dir = File.join(CONFIGS, args[:env])
    # Temporary/ad-hoc config changes for cardano-node:
    config_json = JSON.parse(File.read("#{config_dir}/config.json"))
    config_json['EnableP2P'] = false
    File.write("#{config_dir}/config.json", JSON.pretty_generate(config_json))

    topology = %({
          "Producers": [
            {
              "addr": "#{ENV.fetch('NETWORK', nil)}-node.world.dev.cardano.org",
              "port": 30000,
              "valency": 2
            }
          ]
        })
    File.write("#{config_dir}/topology.json", topology)
  end
end

task :get_docker_logs do
  log ">> Getting docker logs into #{LOGS}"

  mk_dir(LOGS)
  node_logfile = `docker inspect --format='{{.LogPath}}' cardano-node`.gsub("\n", '')
  wallet_logfile = `docker inspect --format='{{.LogPath}}' cardano-wallet`.gsub("\n", '')

  cmd "sudo cp #{node_logfile} #{LOGS}/node.log"
  cmd "sudo cp #{wallet_logfile} #{LOGS}/wallet.log"

  # Add permissions so logs can be uploaded from workflow
  cmd "sudo chmod a+rw #{LOGS}/node.log"
  cmd "sudo chmod a+rw #{LOGS}/wallet.log"
end

##
# Setup utility task getting node and wallet binaries, configs and decoding fixtures
# so it is ready to start
task :setup, [:env, :branch, :skip_bins, :skip_configs] do |_task, args|
  log '>> Getting latest binaries and configs and decoding fixtures...'
  env = args[:env]
  branch = args[:branch] || 'master'

  if args[:skip_bins]
    log '>> Skipping getting latest binaries. Will test wallet and node from $PATH.'
  else
    Rake::Task[:get_latest_bins].invoke(branch)
  end

  if args[:skip_configs]
    log '>> Skipping getting latest configs.'
  else
    Rake::Task[:get_latest_configs].invoke(env)
  end

  Rake::Task[:secrets_decode].invoke
end

task :run_on, [:env, :sync_strategy, :skip_bins, :skip_configs, :branch] do |_task, args|
  log '>> Setting up env and running tests...'
  log "TESTS_E2E_STATEDIR=#{STATE}"
  env = args[:env]
  sync_strategy = args[:sync_strategy] || :sync
  branch = args[:branch] || nil

  Rake::Task[:setup].invoke(env, branch, args[:skip_bins], args[:skip_configs])
  Rake::Task[:display_versions].invoke

  Rake::Task[:stop_node_and_wallet].invoke(env)
  Rake::Task[:start_node_and_wallet].invoke(env)

  if sync_strategy == 'no-sync'
    log '>> Skipping waiting for node to be synced...'
  else
    Rake::Task[:wait_until_node_synced].invoke
  end

  Rake::Task[:spec].invoke
  Rake::Task[:stop_node_and_wallet].invoke(env)
end

##
# print datetime in format that's consistent across different OS
# $ rake datetime
# 20211122-94332
task :datetime do
  puts Time.now.strftime('%Y%m%d-%H%M%S')
end
