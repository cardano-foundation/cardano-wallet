module Babbage where
{-----------------------------------------------------------------------------
    Types for the Babbage era of the Cardano ledger,
    focusing on types relating to transactions.

    The type definitions here are meant to satisfy two requirements:
    1. Visually match the specification documents (PDF) for correctness.
       (No renamings, no reorderings. The spec is law. üßëüèª‚Äç‚öñÔ∏è)
       (Some filtering is necessary as later specs are written as updates.)
    2. Be machine-readable in order to map them to a programming language.

    TheCardano  ledger specifications are found at
    https://github.com/input-output-hk/cardano-ledger/releases/latest/

    In order to make the hash types more specific, we         
    have also taken into account the binary format in `babbage.cddl`.
------------------------------------------------------------------------------}

Slot    = _;
Network = _;
Ix      = ‚Ñï;

ByteString = Bytes;

{-----------------------------------------------------------------------------
    Addresses
------------------------------------------------------------------------------}
Addr     = _; -- simplified in this document
Addr_rws = Addr;

DCert    = _; -- simplified in this document

{-----------------------------------------------------------------------------
    Cryptographic definitions
    Shelley spec, Figure 2, filtered
------------------------------------------------------------------------------}
VKey = _;
Sig  = _;

{-----------------------------------------------------------------------------
    Hashes
    Shelley spec, Section A.1 Hashing
------------------------------------------------------------------------------}
Hash28 = _; -- 28 bytes. BLAKE2b-224
Hash32 = _; -- 32 bytes. BLAKE2b-256

{-----------------------------------------------------------------------------
    Hashes
    Alonzo spec, Figure 21
------------------------------------------------------------------------------}
ScriptHash = Hash28;
KeyHash    = Hash28;
DataHash   = Hash32;
TxId       = _; -- simplified in this document

{-----------------------------------------------------------------------------
    Simple scripts
------------------------------------------------------------------------------}
Script^ph1 = _; -- simplified in this document

{-----------------------------------------------------------------------------
    Protocol parameters
    Babbage spec, Figure 1
------------------------------------------------------------------------------}
ExUnits = ‚Ñï √ó ‚Ñï;

{-----------------------------------------------------------------------------
    Protocol parameters update
------------------------------------------------------------------------------}
Update = _; -- simplified in this document

{-----------------------------------------------------------------------------
    Plutus
    Alonzo Spec, Figure 2
------------------------------------------------------------------------------}
-- Abstract types
ScriptIntegrityHash = Hash32;       -- `script_data_hash` in babbage.cddl
Script_plc = _;
Data       = _;

-- Script types
Script^ph2 = Script_plc;
Script     = Script^ph1 ‚äé Script^ph2;
IsValid    = Bool;
Datum      = Data;
Redeemer   = Data;

-- Derived types
ValidityInterval = Slot? √ó Slot?;
-- TxOut -- defined in Babbage
Tag        = _; -- FIXME. Enum
RdmrPtr    = Tag √ó Ix;
ScriptHash = Hash28;                -- `scripthash` in babbage.cddl

{-----------------------------------------------------------------------------
    Value and Token Algebra
    Mary spec, Figure 3, filtered
------------------------------------------------------------------------------}
AssetName = ByteString;
PolicyID  = ScriptHash;
AdaIDType = _;
AssetID   = AdaIDType ‚äé (PolicyID √ó AssetName);
Quantity  = ‚Ñ§;
Value     = AssetID ‚Ü¶0 Quantity;

{-----------------------------------------------------------------------------
    Transactions
    Shelley spec, Figure 10, filtered
------------------------------------------------------------------------------}
-- Abstract types
-- TxId -- defined elsewhere
Metadatum = _;

-- Derived types
TxIn        = TxId √ó Ix;
UTxO        = TxIn ‚Ü¶ TxOut;
Wdrl        = Addr_rwd ‚Ü¶ Coin;
Metadata    = ‚Ñï ‚Ü¶ Metadatum; 

{-----------------------------------------------------------------------------
    Transaction Body
    Babbage spec, Figure 1
------------------------------------------------------------------------------}
TxOut = Addr √ó Value √ó (Datum ‚äé DataHash)? √ó Script?;

TxBody =
  { spendInputs         : ‚Ñô TxIn
  , collInputs          : ‚Ñô TxIn
  , refInputs           : ‚Ñô TxIn
  , txouts              : (Ix ‚Üí‚àó TxOut)
  , collRet             : TxOut?
  , txcoll              : Coin?
  , txcerts             : DCert*
  , mint                : Value
  , txfee               : Coin
  , txvldt              : ValidityInterval
  , txwdrls             : Wdrl
  , txUpdates           : Update?
  , reqSignerHashes     : ‚Ñô KeyHash
  , scriptIntegrityHash : ScriptIntegrityHash?
  , txADhash            : AuxiliaryDataHash?
  , txnetworkid         : Network?
  };

{-----------------------------------------------------------------------------
    AuxiliaryData
    Mary spec, Figure 5, filtered
------------------------------------------------------------------------------}
AuxiliaryData =
  { scripts : ‚Ñô Script
  , md      : Metadata? 
  };

AuxiliaryDataHash = Hash32; -- `auxiliary_data_hash` in babbage.cddl

{-----------------------------------------------------------------------------
    Transaction and witness
    Alonzo spec, Figure 3, filtered
------------------------------------------------------------------------------}
TxWitness =
  { txwitsVKey : VKey ‚Ü¶ Sig
  , txscripts  : ScriptHash ‚Ü¶ Script
  , txdats     : DataHash ‚Ü¶ Datum
  , txrdmrs    : RdmrPtr ‚Ü¶ (Redeemer √ó ExUnits)
  };

Tx =
  { txbody        : TxBody
  , txwits        : TxWitness
  , isValid       : IsValid
  , auxiliaryData : AuxiliaryData?
  };
